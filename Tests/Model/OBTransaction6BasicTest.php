<?php
/**
 * OBTransaction6BasicTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Account and Transaction API Specification
 *
 * Swagger for Account and Transaction API Specification
 *
 * The version of the OpenAPI document: 3.1.11
 * Contact: ServiceDesk@openbanking.org.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Model;

use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * OBTransaction6BasicTest Class Doc Comment
 *
 * @category    Class
 * @description Provides further details on an entry in the report.
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\OBTransaction6Basic
 */
class OBTransaction6BasicTest extends TestCase
{
    protected OBTransaction6Basic|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
         $this->object = $this->getMockBuilder(OBTransaction6Basic::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(OBTransaction6Basic::class));
        $this->assertInstanceOf(OBTransaction6Basic::class, $this->object);
    }

    /**
     * Test attribute "accountId"
     *
     * @group unit
     * @small
     */
    public function testPropertyAccountId(): void
    {
        $this->markTestSkipped('Test for property accountId not implemented');
    }

    /**
     * Test attribute "transactionId"
     *
     * @group unit
     * @small
     */
    public function testPropertyTransactionId(): void
    {
        $this->markTestSkipped('Test for property transactionId not implemented');
    }

    /**
     * Test attribute "transactionReference"
     *
     * @group unit
     * @small
     */
    public function testPropertyTransactionReference(): void
    {
        $this->markTestSkipped('Test for property transactionReference not implemented');
    }

    /**
     * Test attribute "statementReference"
     *
     * @group unit
     * @small
     */
    public function testPropertyStatementReference(): void
    {
        $this->markTestSkipped('Test for property statementReference not implemented');
    }

    /**
     * Test attribute "creditDebitIndicator"
     *
     * @group unit
     * @small
     */
    public function testPropertyCreditDebitIndicator(): void
    {
        $this->markTestSkipped('Test for property creditDebitIndicator not implemented');
    }

    /**
     * Test attribute "status"
     *
     * @group unit
     * @small
     */
    public function testPropertyStatus(): void
    {
        $this->markTestSkipped('Test for property status not implemented');
    }

    /**
     * Test attribute "transactionMutability"
     *
     * @group unit
     * @small
     */
    public function testPropertyTransactionMutability(): void
    {
        $this->markTestSkipped('Test for property transactionMutability not implemented');
    }

    /**
     * Test attribute "bookingDateTime"
     *
     * @group unit
     * @small
     */
    public function testPropertyBookingDateTime(): void
    {
        $this->markTestSkipped('Test for property bookingDateTime not implemented');
    }

    /**
     * Test attribute "valueDateTime"
     *
     * @group unit
     * @small
     */
    public function testPropertyValueDateTime(): void
    {
        $this->markTestSkipped('Test for property valueDateTime not implemented');
    }

    /**
     * Test attribute "addressLine"
     *
     * @group unit
     * @small
     */
    public function testPropertyAddressLine(): void
    {
        $this->markTestSkipped('Test for property addressLine not implemented');
    }

    /**
     * Test attribute "amount"
     *
     * @group unit
     * @small
     */
    public function testPropertyAmount(): void
    {
        $this->markTestSkipped('Test for property amount not implemented');
    }

    /**
     * Test attribute "chargeAmount"
     *
     * @group unit
     * @small
     */
    public function testPropertyChargeAmount(): void
    {
        $this->markTestSkipped('Test for property chargeAmount not implemented');
    }

    /**
     * Test attribute "currencyExchange"
     *
     * @group unit
     * @small
     */
    public function testPropertyCurrencyExchange(): void
    {
        $this->markTestSkipped('Test for property currencyExchange not implemented');
    }

    /**
     * Test attribute "bankTransactionCode"
     *
     * @group unit
     * @small
     */
    public function testPropertyBankTransactionCode(): void
    {
        $this->markTestSkipped('Test for property bankTransactionCode not implemented');
    }

    /**
     * Test attribute "proprietaryBankTransactionCode"
     *
     * @group unit
     * @small
     */
    public function testPropertyProprietaryBankTransactionCode(): void
    {
        $this->markTestSkipped('Test for property proprietaryBankTransactionCode not implemented');
    }

    /**
     * Test attribute "cardInstrument"
     *
     * @group unit
     * @small
     */
    public function testPropertyCardInstrument(): void
    {
        $this->markTestSkipped('Test for property cardInstrument not implemented');
    }

    /**
     * Test attribute "supplementaryData"
     *
     * @group unit
     * @small
     */
    public function testPropertySupplementaryData(): void
    {
        $this->markTestSkipped('Test for property supplementaryData not implemented');
    }
}
