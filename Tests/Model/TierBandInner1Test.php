<?php
/**
 * TierBandInner1Test
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Account and Transaction API Specification
 *
 * Swagger for Account and Transaction API Specification
 *
 * The version of the OpenAPI document: 3.1.11
 * Contact: ServiceDesk@openbanking.org.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Model;

use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * TierBandInner1Test Class Doc Comment
 *
 * @category    Class
 * @description Tier Band Details
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\TierBandInner1
 */
class TierBandInner1Test extends TestCase
{
    protected TierBandInner1|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
         $this->object = $this->getMockBuilder(TierBandInner1::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(TierBandInner1::class));
        $this->assertInstanceOf(TierBandInner1::class, $this->object);
    }

    /**
     * Test attribute "identification"
     *
     * @group unit
     * @small
     */
    public function testPropertyIdentification(): void
    {
        $this->markTestSkipped('Test for property identification not implemented');
    }

    /**
     * Test attribute "tierValueMinimum"
     *
     * @group unit
     * @small
     */
    public function testPropertyTierValueMinimum(): void
    {
        $this->markTestSkipped('Test for property tierValueMinimum not implemented');
    }

    /**
     * Test attribute "tierValueMaximum"
     *
     * @group unit
     * @small
     */
    public function testPropertyTierValueMaximum(): void
    {
        $this->markTestSkipped('Test for property tierValueMaximum not implemented');
    }

    /**
     * Test attribute "calculationFrequency"
     *
     * @group unit
     * @small
     */
    public function testPropertyCalculationFrequency(): void
    {
        $this->markTestSkipped('Test for property calculationFrequency not implemented');
    }

    /**
     * Test attribute "applicationFrequency"
     *
     * @group unit
     * @small
     */
    public function testPropertyApplicationFrequency(): void
    {
        $this->markTestSkipped('Test for property applicationFrequency not implemented');
    }

    /**
     * Test attribute "depositInterestAppliedCoverage"
     *
     * @group unit
     * @small
     */
    public function testPropertyDepositInterestAppliedCoverage(): void
    {
        $this->markTestSkipped('Test for property depositInterestAppliedCoverage not implemented');
    }

    /**
     * Test attribute "fixedVariableInterestRateType"
     *
     * @group unit
     * @small
     */
    public function testPropertyFixedVariableInterestRateType(): void
    {
        $this->markTestSkipped('Test for property fixedVariableInterestRateType not implemented');
    }

    /**
     * Test attribute "aER"
     *
     * @group unit
     * @small
     */
    public function testPropertyAER(): void
    {
        $this->markTestSkipped('Test for property aER not implemented');
    }

    /**
     * Test attribute "bankInterestRateType"
     *
     * @group unit
     * @small
     */
    public function testPropertyBankInterestRateType(): void
    {
        $this->markTestSkipped('Test for property bankInterestRateType not implemented');
    }

    /**
     * Test attribute "bankInterestRate"
     *
     * @group unit
     * @small
     */
    public function testPropertyBankInterestRate(): void
    {
        $this->markTestSkipped('Test for property bankInterestRate not implemented');
    }

    /**
     * Test attribute "notes"
     *
     * @group unit
     * @small
     */
    public function testPropertyNotes(): void
    {
        $this->markTestSkipped('Test for property notes not implemented');
    }

    /**
     * Test attribute "otherBankInterestType"
     *
     * @group unit
     * @small
     */
    public function testPropertyOtherBankInterestType(): void
    {
        $this->markTestSkipped('Test for property otherBankInterestType not implemented');
    }

    /**
     * Test attribute "otherApplicationFrequency"
     *
     * @group unit
     * @small
     */
    public function testPropertyOtherApplicationFrequency(): void
    {
        $this->markTestSkipped('Test for property otherApplicationFrequency not implemented');
    }

    /**
     * Test attribute "otherCalculationFrequency"
     *
     * @group unit
     * @small
     */
    public function testPropertyOtherCalculationFrequency(): void
    {
        $this->markTestSkipped('Test for property otherCalculationFrequency not implemented');
    }
}
