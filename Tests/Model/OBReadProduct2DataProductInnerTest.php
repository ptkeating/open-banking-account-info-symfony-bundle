<?php
/**
 * OBReadProduct2DataProductInnerTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Account and Transaction API Specification
 *
 * Swagger for Account and Transaction API Specification
 *
 * The version of the OpenAPI document: 3.1.11
 * Contact: ServiceDesk@openbanking.org.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Model;

use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * OBReadProduct2DataProductInnerTest Class Doc Comment
 *
 * @category    Class
 * @description Product details associated with the Account
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\OBReadProduct2DataProductInner
 */
class OBReadProduct2DataProductInnerTest extends TestCase
{
    protected OBReadProduct2DataProductInner|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
         $this->object = $this->getMockBuilder(OBReadProduct2DataProductInner::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(OBReadProduct2DataProductInner::class));
        $this->assertInstanceOf(OBReadProduct2DataProductInner::class, $this->object);
    }

    /**
     * Test attribute "productName"
     *
     * @group unit
     * @small
     */
    public function testPropertyProductName(): void
    {
        $this->markTestSkipped('Test for property productName not implemented');
    }

    /**
     * Test attribute "productId"
     *
     * @group unit
     * @small
     */
    public function testPropertyProductId(): void
    {
        $this->markTestSkipped('Test for property productId not implemented');
    }

    /**
     * Test attribute "accountId"
     *
     * @group unit
     * @small
     */
    public function testPropertyAccountId(): void
    {
        $this->markTestSkipped('Test for property accountId not implemented');
    }

    /**
     * Test attribute "secondaryProductId"
     *
     * @group unit
     * @small
     */
    public function testPropertySecondaryProductId(): void
    {
        $this->markTestSkipped('Test for property secondaryProductId not implemented');
    }

    /**
     * Test attribute "productType"
     *
     * @group unit
     * @small
     */
    public function testPropertyProductType(): void
    {
        $this->markTestSkipped('Test for property productType not implemented');
    }

    /**
     * Test attribute "marketingStateId"
     *
     * @group unit
     * @small
     */
    public function testPropertyMarketingStateId(): void
    {
        $this->markTestSkipped('Test for property marketingStateId not implemented');
    }

    /**
     * Test attribute "otherProductType"
     *
     * @group unit
     * @small
     */
    public function testPropertyOtherProductType(): void
    {
        $this->markTestSkipped('Test for property otherProductType not implemented');
    }

    /**
     * Test attribute "bCA"
     *
     * @group unit
     * @small
     */
    public function testPropertyBCA(): void
    {
        $this->markTestSkipped('Test for property bCA not implemented');
    }

    /**
     * Test attribute "pCA"
     *
     * @group unit
     * @small
     */
    public function testPropertyPCA(): void
    {
        $this->markTestSkipped('Test for property pCA not implemented');
    }
}
