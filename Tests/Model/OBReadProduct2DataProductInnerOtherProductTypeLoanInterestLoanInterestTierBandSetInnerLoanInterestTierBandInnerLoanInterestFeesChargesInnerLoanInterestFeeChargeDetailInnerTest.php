<?php
/**
 * OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInnerLoanInterestFeesChargesInnerLoanInterestFeeChargeDetailInnerTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Account and Transaction API Specification
 *
 * Swagger for Account and Transaction API Specification
 *
 * The version of the OpenAPI document: 3.1.11
 * Contact: ServiceDesk@openbanking.org.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Model;

use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInnerLoanInterestFeesChargesInnerLoanInterestFeeChargeDetailInnerTest Class Doc Comment
 *
 * @category    Class
 * @description Other fees/charges details
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInnerLoanInterestFeesChargesInnerLoanInterestFeeChargeDetailInner
 */
class OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInnerLoanInterestFeesChargesInnerLoanInterestFeeChargeDetailInnerTest extends TestCase
{
    protected OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInnerLoanInterestFeesChargesInnerLoanInterestFeeChargeDetailInner|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
         $this->object = $this->getMockBuilder(OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInnerLoanInterestFeesChargesInnerLoanInterestFeeChargeDetailInner::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInnerLoanInterestFeesChargesInnerLoanInterestFeeChargeDetailInner::class));
        $this->assertInstanceOf(OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInnerLoanInterestFeesChargesInnerLoanInterestFeeChargeDetailInner::class, $this->object);
    }

    /**
     * Test attribute "feeType"
     *
     * @group unit
     * @small
     */
    public function testPropertyFeeType(): void
    {
        $this->markTestSkipped('Test for property feeType not implemented');
    }

    /**
     * Test attribute "negotiableIndicator"
     *
     * @group unit
     * @small
     */
    public function testPropertyNegotiableIndicator(): void
    {
        $this->markTestSkipped('Test for property negotiableIndicator not implemented');
    }

    /**
     * Test attribute "feeAmount"
     *
     * @group unit
     * @small
     */
    public function testPropertyFeeAmount(): void
    {
        $this->markTestSkipped('Test for property feeAmount not implemented');
    }

    /**
     * Test attribute "feeRate"
     *
     * @group unit
     * @small
     */
    public function testPropertyFeeRate(): void
    {
        $this->markTestSkipped('Test for property feeRate not implemented');
    }

    /**
     * Test attribute "feeRateType"
     *
     * @group unit
     * @small
     */
    public function testPropertyFeeRateType(): void
    {
        $this->markTestSkipped('Test for property feeRateType not implemented');
    }

    /**
     * Test attribute "applicationFrequency"
     *
     * @group unit
     * @small
     */
    public function testPropertyApplicationFrequency(): void
    {
        $this->markTestSkipped('Test for property applicationFrequency not implemented');
    }

    /**
     * Test attribute "calculationFrequency"
     *
     * @group unit
     * @small
     */
    public function testPropertyCalculationFrequency(): void
    {
        $this->markTestSkipped('Test for property calculationFrequency not implemented');
    }

    /**
     * Test attribute "notes"
     *
     * @group unit
     * @small
     */
    public function testPropertyNotes(): void
    {
        $this->markTestSkipped('Test for property notes not implemented');
    }

    /**
     * Test attribute "otherFeeType"
     *
     * @group unit
     * @small
     */
    public function testPropertyOtherFeeType(): void
    {
        $this->markTestSkipped('Test for property otherFeeType not implemented');
    }

    /**
     * Test attribute "otherFeeRateType"
     *
     * @group unit
     * @small
     */
    public function testPropertyOtherFeeRateType(): void
    {
        $this->markTestSkipped('Test for property otherFeeRateType not implemented');
    }

    /**
     * Test attribute "otherApplicationFrequency"
     *
     * @group unit
     * @small
     */
    public function testPropertyOtherApplicationFrequency(): void
    {
        $this->markTestSkipped('Test for property otherApplicationFrequency not implemented');
    }

    /**
     * Test attribute "otherCalculationFrequency"
     *
     * @group unit
     * @small
     */
    public function testPropertyOtherCalculationFrequency(): void
    {
        $this->markTestSkipped('Test for property otherCalculationFrequency not implemented');
    }
}
