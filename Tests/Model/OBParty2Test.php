<?php
/**
 * OBParty2Test
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Account and Transaction API Specification
 *
 * Swagger for Account and Transaction API Specification
 *
 * The version of the OpenAPI document: 3.1.11
 * Contact: ServiceDesk@openbanking.org.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Model;

use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * OBParty2Test Class Doc Comment
 *
 * @category    Class
 * @description OBParty2
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\OBParty2
 */
class OBParty2Test extends TestCase
{
    protected OBParty2|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
         $this->object = $this->getMockBuilder(OBParty2::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(OBParty2::class));
        $this->assertInstanceOf(OBParty2::class, $this->object);
    }

    /**
     * Test attribute "partyId"
     *
     * @group unit
     * @small
     */
    public function testPropertyPartyId(): void
    {
        $this->markTestSkipped('Test for property partyId not implemented');
    }

    /**
     * Test attribute "partyNumber"
     *
     * @group unit
     * @small
     */
    public function testPropertyPartyNumber(): void
    {
        $this->markTestSkipped('Test for property partyNumber not implemented');
    }

    /**
     * Test attribute "partyType"
     *
     * @group unit
     * @small
     */
    public function testPropertyPartyType(): void
    {
        $this->markTestSkipped('Test for property partyType not implemented');
    }

    /**
     * Test attribute "name"
     *
     * @group unit
     * @small
     */
    public function testPropertyName(): void
    {
        $this->markTestSkipped('Test for property name not implemented');
    }

    /**
     * Test attribute "fullLegalName"
     *
     * @group unit
     * @small
     */
    public function testPropertyFullLegalName(): void
    {
        $this->markTestSkipped('Test for property fullLegalName not implemented');
    }

    /**
     * Test attribute "legalStructure"
     *
     * @group unit
     * @small
     */
    public function testPropertyLegalStructure(): void
    {
        $this->markTestSkipped('Test for property legalStructure not implemented');
    }

    /**
     * Test attribute "beneficialOwnership"
     *
     * @group unit
     * @small
     */
    public function testPropertyBeneficialOwnership(): void
    {
        $this->markTestSkipped('Test for property beneficialOwnership not implemented');
    }

    /**
     * Test attribute "accountRole"
     *
     * @group unit
     * @small
     */
    public function testPropertyAccountRole(): void
    {
        $this->markTestSkipped('Test for property accountRole not implemented');
    }

    /**
     * Test attribute "emailAddress"
     *
     * @group unit
     * @small
     */
    public function testPropertyEmailAddress(): void
    {
        $this->markTestSkipped('Test for property emailAddress not implemented');
    }

    /**
     * Test attribute "phone"
     *
     * @group unit
     * @small
     */
    public function testPropertyPhone(): void
    {
        $this->markTestSkipped('Test for property phone not implemented');
    }

    /**
     * Test attribute "mobile"
     *
     * @group unit
     * @small
     */
    public function testPropertyMobile(): void
    {
        $this->markTestSkipped('Test for property mobile not implemented');
    }

    /**
     * Test attribute "relationships"
     *
     * @group unit
     * @small
     */
    public function testPropertyRelationships(): void
    {
        $this->markTestSkipped('Test for property relationships not implemented');
    }

    /**
     * Test attribute "address"
     *
     * @group unit
     * @small
     */
    public function testPropertyAddress(): void
    {
        $this->markTestSkipped('Test for property address not implemented');
    }
}
