<?php
/**
 * OBStatement2
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Account and Transaction API Specification
 *
 * Swagger for Account and Transaction API Specification
 *
 * The version of the OpenAPI document: 3.1.11
 * Contact: ServiceDesk@openbanking.org.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the OBStatement2 model.
 *
 * Provides further details on a statement resource.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class OBStatement2 
{
        /**
     * A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
     *
     * @var string|null
     * @SerializedName("AccountId")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 40
     * )
     * @Assert\Length(
     *   min = 1
     * )
     */
    protected ?string $accountId = null;

    /**
     * Unique identifier for the statement resource within an servicing institution. This identifier is both unique and immutable.
     *
     * @var string|null
     * @SerializedName("StatementId")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 40
     * )
     * @Assert\Length(
     *   min = 1
     * )
     */
    protected ?string $statementId = null;

    /**
     * Unique reference for the statement. This reference may be optionally populated if available.
     *
     * @var string|null
     * @SerializedName("StatementReference")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 35
     * )
     * @Assert\Length(
     *   min = 1
     * )
     */
    protected ?string $statementReference = null;

    /**
     * @var OBExternalStatementType1Code|null
     * @SerializedName("Type")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\Type("OpenAPI\Server\Model\OBExternalStatementType1Code")
     * @Type("OpenAPI\Server\Model\OBExternalStatementType1Code")
     */
    protected ?OBExternalStatementType1Code $type = null;

    /**
     * Date and time at which the statement period starts.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
     *
     * @var \DateTime|null
     * @SerializedName("StartDateTime")
     * @Assert\NotNull()
     * @Assert\DateTime()
     * @Type("DateTime")
     */
    protected ?\DateTime $startDateTime = null;

    /**
     * Date and time at which the statement period ends.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
     *
     * @var \DateTime|null
     * @SerializedName("EndDateTime")
     * @Assert\NotNull()
     * @Assert\DateTime()
     * @Type("DateTime")
     */
    protected ?\DateTime $endDateTime = null;

    /**
     * Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
     *
     * @var \DateTime|null
     * @SerializedName("CreationDateTime")
     * @Assert\NotNull()
     * @Assert\DateTime()
     * @Type("DateTime")
     */
    protected ?\DateTime $creationDateTime = null;

    /**
     * @var array|null
     * @SerializedName("StatementDescription")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     */
    protected ?array $statementDescription = null;

    /**
     * @var array|null
     * @SerializedName("StatementBenefit")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\OBStatement2StatementBenefitInner")
     * })
     * @Type("array<OpenAPI\Server\Model\OBStatement2StatementBenefitInner>")
     */
    protected ?array $statementBenefit = null;

    /**
     * @var array|null
     * @SerializedName("StatementFee")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\OBStatement2StatementFeeInner")
     * })
     * @Type("array<OpenAPI\Server\Model\OBStatement2StatementFeeInner>")
     */
    protected ?array $statementFee = null;

    /**
     * @var array|null
     * @SerializedName("StatementInterest")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\OBStatement2StatementInterestInner")
     * })
     * @Type("array<OpenAPI\Server\Model\OBStatement2StatementInterestInner>")
     */
    protected ?array $statementInterest = null;

    /**
     * @var array|null
     * @SerializedName("StatementAmount")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\OBStatement2StatementAmountInner")
     * })
     * @Type("array<OpenAPI\Server\Model\OBStatement2StatementAmountInner>")
     */
    protected ?array $statementAmount = null;

    /**
     * @var array|null
     * @SerializedName("StatementDateTime")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\OBStatement2StatementDateTimeInner")
     * })
     * @Type("array<OpenAPI\Server\Model\OBStatement2StatementDateTimeInner>")
     */
    protected ?array $statementDateTime = null;

    /**
     * @var array|null
     * @SerializedName("StatementRate")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\OBStatement2StatementRateInner")
     * })
     * @Type("array<OpenAPI\Server\Model\OBStatement2StatementRateInner>")
     */
    protected ?array $statementRate = null;

    /**
     * @var array|null
     * @SerializedName("StatementValue")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\OBStatement2StatementValueInner")
     * })
     * @Type("array<OpenAPI\Server\Model\OBStatement2StatementValueInner>")
     */
    protected ?array $statementValue = null;

    /**
     * @var OBReadBalance1DataTotalValue|null
     * @SerializedName("TotalValue")
     * @Assert\Type("OpenAPI\Server\Model\OBReadBalance1DataTotalValue")
     * @Type("OpenAPI\Server\Model\OBReadBalance1DataTotalValue")
     */
    protected ?OBReadBalance1DataTotalValue $totalValue = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->accountId = $data['accountId'] ?? null;
        $this->statementId = $data['statementId'] ?? null;
        $this->statementReference = $data['statementReference'] ?? null;
        $this->type = $data['type'] ?? null;
        $this->startDateTime = $data['startDateTime'] ?? null;
        $this->endDateTime = $data['endDateTime'] ?? null;
        $this->creationDateTime = $data['creationDateTime'] ?? null;
        $this->statementDescription = $data['statementDescription'] ?? null;
        $this->statementBenefit = $data['statementBenefit'] ?? null;
        $this->statementFee = $data['statementFee'] ?? null;
        $this->statementInterest = $data['statementInterest'] ?? null;
        $this->statementAmount = $data['statementAmount'] ?? null;
        $this->statementDateTime = $data['statementDateTime'] ?? null;
        $this->statementRate = $data['statementRate'] ?? null;
        $this->statementValue = $data['statementValue'] ?? null;
        $this->totalValue = $data['totalValue'] ?? null;
    }

    /**
     * Gets accountId.
     *
     * @return string|null
     */
    public function getAccountId(): ?string
    {
        return $this->accountId;
    }

    /**
     * Sets accountId.
     *
     * @param string|null $accountId  A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
     *
     * @return $this
     */
    public function setAccountId(?string $accountId): self
    {
        $this->accountId = $accountId;

        return $this;
    }

    /**
     * Gets statementId.
     *
     * @return string|null
     */
    public function getStatementId(): ?string
    {
        return $this->statementId;
    }

    /**
     * Sets statementId.
     *
     * @param string|null $statementId  Unique identifier for the statement resource within an servicing institution. This identifier is both unique and immutable.
     *
     * @return $this
     */
    public function setStatementId(?string $statementId = null): self
    {
        $this->statementId = $statementId;

        return $this;
    }

    /**
     * Gets statementReference.
     *
     * @return string|null
     */
    public function getStatementReference(): ?string
    {
        return $this->statementReference;
    }

    /**
     * Sets statementReference.
     *
     * @param string|null $statementReference  Unique reference for the statement. This reference may be optionally populated if available.
     *
     * @return $this
     */
    public function setStatementReference(?string $statementReference = null): self
    {
        $this->statementReference = $statementReference;

        return $this;
    }

    /**
     * Gets type.
     *
     * @return OBExternalStatementType1Code|null
     */
    public function getType(): ?OBExternalStatementType1Code
    {
        return $this->type;
    }

    /**
     * Sets type.
     *
     * @param OBExternalStatementType1Code|null $type
     *
     * @return $this
     */
    public function setType(?OBExternalStatementType1Code $type): self
    {
        $this->type = $type;

        return $this;
    }

    /**
     * Gets startDateTime.
     *
     * @return \DateTime|null
     */
    public function getStartDateTime(): ?\DateTime
    {
        return $this->startDateTime;
    }

    /**
     * Sets startDateTime.
     *
     * @param \DateTime|null $startDateTime  Date and time at which the statement period starts.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
     *
     * @return $this
     */
    public function setStartDateTime(?\DateTime $startDateTime): self
    {
        $this->startDateTime = $startDateTime;

        return $this;
    }

    /**
     * Gets endDateTime.
     *
     * @return \DateTime|null
     */
    public function getEndDateTime(): ?\DateTime
    {
        return $this->endDateTime;
    }

    /**
     * Sets endDateTime.
     *
     * @param \DateTime|null $endDateTime  Date and time at which the statement period ends.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
     *
     * @return $this
     */
    public function setEndDateTime(?\DateTime $endDateTime): self
    {
        $this->endDateTime = $endDateTime;

        return $this;
    }

    /**
     * Gets creationDateTime.
     *
     * @return \DateTime|null
     */
    public function getCreationDateTime(): ?\DateTime
    {
        return $this->creationDateTime;
    }

    /**
     * Sets creationDateTime.
     *
     * @param \DateTime|null $creationDateTime  Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
     *
     * @return $this
     */
    public function setCreationDateTime(?\DateTime $creationDateTime): self
    {
        $this->creationDateTime = $creationDateTime;

        return $this;
    }

    /**
     * Gets statementDescription.
     *
     * @return array|null
     */
    public function getStatementDescription(): ?array
    {
        return $this->statementDescription;
    }

    /**
     * Sets statementDescription.
     *
     * @param array|null $statementDescription
     *
     * @return $this
     */
    public function setStatementDescription(?array $statementDescription = null): self
    {
        $this->statementDescription = $statementDescription;

        return $this;
    }

    /**
     * Gets statementBenefit.
     *
     * @return array|null
     */
    public function getStatementBenefit(): ?array
    {
        return $this->statementBenefit;
    }

    /**
     * Sets statementBenefit.
     *
     * @param array|null $statementBenefit
     *
     * @return $this
     */
    public function setStatementBenefit(?array $statementBenefit = null): self
    {
        $this->statementBenefit = $statementBenefit;

        return $this;
    }

    /**
     * Gets statementFee.
     *
     * @return array|null
     */
    public function getStatementFee(): ?array
    {
        return $this->statementFee;
    }

    /**
     * Sets statementFee.
     *
     * @param array|null $statementFee
     *
     * @return $this
     */
    public function setStatementFee(?array $statementFee = null): self
    {
        $this->statementFee = $statementFee;

        return $this;
    }

    /**
     * Gets statementInterest.
     *
     * @return array|null
     */
    public function getStatementInterest(): ?array
    {
        return $this->statementInterest;
    }

    /**
     * Sets statementInterest.
     *
     * @param array|null $statementInterest
     *
     * @return $this
     */
    public function setStatementInterest(?array $statementInterest = null): self
    {
        $this->statementInterest = $statementInterest;

        return $this;
    }

    /**
     * Gets statementAmount.
     *
     * @return array|null
     */
    public function getStatementAmount(): ?array
    {
        return $this->statementAmount;
    }

    /**
     * Sets statementAmount.
     *
     * @param array|null $statementAmount
     *
     * @return $this
     */
    public function setStatementAmount(?array $statementAmount = null): self
    {
        $this->statementAmount = $statementAmount;

        return $this;
    }

    /**
     * Gets statementDateTime.
     *
     * @return array|null
     */
    public function getStatementDateTime(): ?array
    {
        return $this->statementDateTime;
    }

    /**
     * Sets statementDateTime.
     *
     * @param array|null $statementDateTime
     *
     * @return $this
     */
    public function setStatementDateTime(?array $statementDateTime = null): self
    {
        $this->statementDateTime = $statementDateTime;

        return $this;
    }

    /**
     * Gets statementRate.
     *
     * @return array|null
     */
    public function getStatementRate(): ?array
    {
        return $this->statementRate;
    }

    /**
     * Sets statementRate.
     *
     * @param array|null $statementRate
     *
     * @return $this
     */
    public function setStatementRate(?array $statementRate = null): self
    {
        $this->statementRate = $statementRate;

        return $this;
    }

    /**
     * Gets statementValue.
     *
     * @return array|null
     */
    public function getStatementValue(): ?array
    {
        return $this->statementValue;
    }

    /**
     * Sets statementValue.
     *
     * @param array|null $statementValue
     *
     * @return $this
     */
    public function setStatementValue(?array $statementValue = null): self
    {
        $this->statementValue = $statementValue;

        return $this;
    }

    /**
     * Gets totalValue.
     *
     * @return OBReadBalance1DataTotalValue|null
     */
    public function getTotalValue(): ?OBReadBalance1DataTotalValue
    {
        return $this->totalValue;
    }

    /**
     * Sets totalValue.
     *
     * @param OBReadBalance1DataTotalValue|null $totalValue
     *
     * @return $this
     */
    public function setTotalValue(?OBReadBalance1DataTotalValue $totalValue = null): self
    {
        $this->totalValue = $totalValue;

        return $this;
    }
}


