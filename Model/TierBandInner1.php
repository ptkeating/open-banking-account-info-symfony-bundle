<?php
/**
 * TierBandInner1
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Account and Transaction API Specification
 *
 * Swagger for Account and Transaction API Specification
 *
 * The version of the OpenAPI document: 3.1.11
 * Contact: ServiceDesk@openbanking.org.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the TierBandInner1 model.
 *
 * Tier Band Details
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class TierBandInner1 
{
        /**
     * Unique and unambiguous identification of a  Tier Band for a PCA.
     *
     * @var string|null
     * @SerializedName("Identification")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 35
     * )
     * @Assert\Length(
     *   min = 1
     * )
     */
    protected ?string $identification = null;

    /**
     * Minimum deposit value for which the credit interest tier applies.
     *
     * @var string|null
     * @SerializedName("TierValueMinimum")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Regex("/^(-?\\d{1,14}){1}(\\.\\d{1,4}){0,1}$/")
     */
    protected ?string $tierValueMinimum = null;

    /**
     * Maximum deposit value for which the credit interest tier applies.
     *
     * @var string|null
     * @SerializedName("TierValueMaximum")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Regex("/^(-?\\d{1,14}){1}(\\.\\d{1,4}){0,1}$/")
     */
    protected ?string $tierValueMaximum = null;

    /**
     * How often is credit interest calculated for the account.
     *
     * @var string|null
     * @SerializedName("CalculationFrequency")
     * @Assert\Choice({ "PerAcademicTerm", "Daily", "HalfYearly", "Monthly", "Other", "Quarterly", "PerStatementDate", "Weekly", "Yearly" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $calculationFrequency = null;

    /**
     * How often is interest applied to the PCA for this tier/band i.e. how often the financial institution pays accumulated interest to the customer&#39;s PCA.
     *
     * @var string|null
     * @SerializedName("ApplicationFrequency")
     * @Assert\NotNull()
     * @Assert\Choice({ "PerAcademicTerm", "Daily", "HalfYearly", "Monthly", "Other", "Quarterly", "PerStatementDate", "Weekly", "Yearly" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $applicationFrequency = null;

    /**
     * Amount on which Interest applied.
     *
     * @var string|null
     * @SerializedName("DepositInterestAppliedCoverage")
     * @Assert\Choice({ "Tiered", "Whole" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $depositInterestAppliedCoverage = null;

    /**
     * Type of interest rate, Fixed or Variable
     *
     * @var string|null
     * @SerializedName("FixedVariableInterestRateType")
     * @Assert\NotNull()
     * @Assert\Choice({ "Fixed", "Variable" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $fixedVariableInterestRateType = null;

    /**
     * The annual equivalent rate (AER) is interest that is calculated under the assumption that any interest paid is combined with the original balance and the next interest payment will be based on the slightly higher account balance. Overall, this means that interest can be compounded several times in a year depending on the number of times that interest payments are made.   Read more: Annual Equivalent Rate (AER) http://www.investopedia.com/terms/a/aer.asp#ixzz4gfR7IO1A
     *
     * @var string|null
     * @SerializedName("AER")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Regex("/^(-?\\d{1,3}){1}(\\.\\d{1,4}){0,1}$/")
     */
    protected ?string $aER = null;

    /**
     * Interest rate types, other than AER, which financial institutions may use to describe the annual interest rate payable to the PCA.
     *
     * @var string|null
     * @SerializedName("BankInterestRateType")
     * @Assert\Choice({ "LinkedBaseRate", "Gross", "Net", "Other" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $bankInterestRateType = null;

    /**
     * Bank Interest for the PCA product
     *
     * @var string|null
     * @SerializedName("BankInterestRate")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Regex("/^(-?\\d{1,3}){1}(\\.\\d{1,4}){0,1}$/")
     */
    protected ?string $bankInterestRate = null;

    /**
     * Optional additional notes to supplement the Tier Band details
     *
     * @var array|null
     * @SerializedName("Notes")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     */
    protected ?array $notes = null;

    /**
     * @var OtherBankInterestType|null
     * @SerializedName("OtherBankInterestType")
     * @Assert\Type("OpenAPI\Server\Model\OtherBankInterestType")
     * @Type("OpenAPI\Server\Model\OtherBankInterestType")
     */
    protected ?OtherBankInterestType $otherBankInterestType = null;

    /**
     * @var OtherApplicationFrequency|null
     * @SerializedName("OtherApplicationFrequency")
     * @Assert\Type("OpenAPI\Server\Model\OtherApplicationFrequency")
     * @Type("OpenAPI\Server\Model\OtherApplicationFrequency")
     */
    protected ?OtherApplicationFrequency $otherApplicationFrequency = null;

    /**
     * @var OtherCalculationFrequency|null
     * @SerializedName("OtherCalculationFrequency")
     * @Assert\Type("OpenAPI\Server\Model\OtherCalculationFrequency")
     * @Type("OpenAPI\Server\Model\OtherCalculationFrequency")
     */
    protected ?OtherCalculationFrequency $otherCalculationFrequency = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->identification = $data['identification'] ?? null;
        $this->tierValueMinimum = $data['tierValueMinimum'] ?? null;
        $this->tierValueMaximum = $data['tierValueMaximum'] ?? null;
        $this->calculationFrequency = $data['calculationFrequency'] ?? null;
        $this->applicationFrequency = $data['applicationFrequency'] ?? null;
        $this->depositInterestAppliedCoverage = $data['depositInterestAppliedCoverage'] ?? null;
        $this->fixedVariableInterestRateType = $data['fixedVariableInterestRateType'] ?? null;
        $this->aER = $data['aER'] ?? null;
        $this->bankInterestRateType = $data['bankInterestRateType'] ?? null;
        $this->bankInterestRate = $data['bankInterestRate'] ?? null;
        $this->notes = $data['notes'] ?? null;
        $this->otherBankInterestType = $data['otherBankInterestType'] ?? null;
        $this->otherApplicationFrequency = $data['otherApplicationFrequency'] ?? null;
        $this->otherCalculationFrequency = $data['otherCalculationFrequency'] ?? null;
    }

    /**
     * Gets identification.
     *
     * @return string|null
     */
    public function getIdentification(): ?string
    {
        return $this->identification;
    }

    /**
     * Sets identification.
     *
     * @param string|null $identification  Unique and unambiguous identification of a  Tier Band for a PCA.
     *
     * @return $this
     */
    public function setIdentification(?string $identification = null): self
    {
        $this->identification = $identification;

        return $this;
    }

    /**
     * Gets tierValueMinimum.
     *
     * @return string|null
     */
    public function getTierValueMinimum(): ?string
    {
        return $this->tierValueMinimum;
    }

    /**
     * Sets tierValueMinimum.
     *
     * @param string|null $tierValueMinimum  Minimum deposit value for which the credit interest tier applies.
     *
     * @return $this
     */
    public function setTierValueMinimum(?string $tierValueMinimum): self
    {
        $this->tierValueMinimum = $tierValueMinimum;

        return $this;
    }

    /**
     * Gets tierValueMaximum.
     *
     * @return string|null
     */
    public function getTierValueMaximum(): ?string
    {
        return $this->tierValueMaximum;
    }

    /**
     * Sets tierValueMaximum.
     *
     * @param string|null $tierValueMaximum  Maximum deposit value for which the credit interest tier applies.
     *
     * @return $this
     */
    public function setTierValueMaximum(?string $tierValueMaximum = null): self
    {
        $this->tierValueMaximum = $tierValueMaximum;

        return $this;
    }

    /**
     * Gets calculationFrequency.
     *
     * @return string|null
     */
    public function getCalculationFrequency(): ?string
    {
        return $this->calculationFrequency;
    }

    /**
     * Sets calculationFrequency.
     *
     * @param string|null $calculationFrequency  How often is credit interest calculated for the account.
     *
     * @return $this
     */
    public function setCalculationFrequency(?string $calculationFrequency = null): self
    {
        $this->calculationFrequency = $calculationFrequency;

        return $this;
    }

    /**
     * Gets applicationFrequency.
     *
     * @return string|null
     */
    public function getApplicationFrequency(): ?string
    {
        return $this->applicationFrequency;
    }

    /**
     * Sets applicationFrequency.
     *
     * @param string|null $applicationFrequency  How often is interest applied to the PCA for this tier/band i.e. how often the financial institution pays accumulated interest to the customer's PCA.
     *
     * @return $this
     */
    public function setApplicationFrequency(?string $applicationFrequency): self
    {
        $this->applicationFrequency = $applicationFrequency;

        return $this;
    }

    /**
     * Gets depositInterestAppliedCoverage.
     *
     * @return string|null
     */
    public function getDepositInterestAppliedCoverage(): ?string
    {
        return $this->depositInterestAppliedCoverage;
    }

    /**
     * Sets depositInterestAppliedCoverage.
     *
     * @param string|null $depositInterestAppliedCoverage  Amount on which Interest applied.
     *
     * @return $this
     */
    public function setDepositInterestAppliedCoverage(?string $depositInterestAppliedCoverage = null): self
    {
        $this->depositInterestAppliedCoverage = $depositInterestAppliedCoverage;

        return $this;
    }

    /**
     * Gets fixedVariableInterestRateType.
     *
     * @return string|null
     */
    public function getFixedVariableInterestRateType(): ?string
    {
        return $this->fixedVariableInterestRateType;
    }

    /**
     * Sets fixedVariableInterestRateType.
     *
     * @param string|null $fixedVariableInterestRateType  Type of interest rate, Fixed or Variable
     *
     * @return $this
     */
    public function setFixedVariableInterestRateType(?string $fixedVariableInterestRateType): self
    {
        $this->fixedVariableInterestRateType = $fixedVariableInterestRateType;

        return $this;
    }

    /**
     * Gets aER.
     *
     * @return string|null
     */
    public function getAER(): ?string
    {
        return $this->aER;
    }

    /**
     * Sets aER.
     *
     * @param string|null $aER  The annual equivalent rate (AER) is interest that is calculated under the assumption that any interest paid is combined with the original balance and the next interest payment will be based on the slightly higher account balance. Overall, this means that interest can be compounded several times in a year depending on the number of times that interest payments are made.   Read more: Annual Equivalent Rate (AER) http://www.investopedia.com/terms/a/aer.asp#ixzz4gfR7IO1A
     *
     * @return $this
     */
    public function setAER(?string $aER): self
    {
        $this->aER = $aER;

        return $this;
    }

    /**
     * Gets bankInterestRateType.
     *
     * @return string|null
     */
    public function getBankInterestRateType(): ?string
    {
        return $this->bankInterestRateType;
    }

    /**
     * Sets bankInterestRateType.
     *
     * @param string|null $bankInterestRateType  Interest rate types, other than AER, which financial institutions may use to describe the annual interest rate payable to the PCA.
     *
     * @return $this
     */
    public function setBankInterestRateType(?string $bankInterestRateType = null): self
    {
        $this->bankInterestRateType = $bankInterestRateType;

        return $this;
    }

    /**
     * Gets bankInterestRate.
     *
     * @return string|null
     */
    public function getBankInterestRate(): ?string
    {
        return $this->bankInterestRate;
    }

    /**
     * Sets bankInterestRate.
     *
     * @param string|null $bankInterestRate  Bank Interest for the PCA product
     *
     * @return $this
     */
    public function setBankInterestRate(?string $bankInterestRate = null): self
    {
        $this->bankInterestRate = $bankInterestRate;

        return $this;
    }

    /**
     * Gets notes.
     *
     * @return array|null
     */
    public function getNotes(): ?array
    {
        return $this->notes;
    }

    /**
     * Sets notes.
     *
     * @param array|null $notes  Optional additional notes to supplement the Tier Band details
     *
     * @return $this
     */
    public function setNotes(?array $notes = null): self
    {
        $this->notes = $notes;

        return $this;
    }

    /**
     * Gets otherBankInterestType.
     *
     * @return OtherBankInterestType|null
     */
    public function getOtherBankInterestType(): ?OtherBankInterestType
    {
        return $this->otherBankInterestType;
    }

    /**
     * Sets otherBankInterestType.
     *
     * @param OtherBankInterestType|null $otherBankInterestType
     *
     * @return $this
     */
    public function setOtherBankInterestType(?OtherBankInterestType $otherBankInterestType = null): self
    {
        $this->otherBankInterestType = $otherBankInterestType;

        return $this;
    }

    /**
     * Gets otherApplicationFrequency.
     *
     * @return OtherApplicationFrequency|null
     */
    public function getOtherApplicationFrequency(): ?OtherApplicationFrequency
    {
        return $this->otherApplicationFrequency;
    }

    /**
     * Sets otherApplicationFrequency.
     *
     * @param OtherApplicationFrequency|null $otherApplicationFrequency
     *
     * @return $this
     */
    public function setOtherApplicationFrequency(?OtherApplicationFrequency $otherApplicationFrequency = null): self
    {
        $this->otherApplicationFrequency = $otherApplicationFrequency;

        return $this;
    }

    /**
     * Gets otherCalculationFrequency.
     *
     * @return OtherCalculationFrequency|null
     */
    public function getOtherCalculationFrequency(): ?OtherCalculationFrequency
    {
        return $this->otherCalculationFrequency;
    }

    /**
     * Sets otherCalculationFrequency.
     *
     * @param OtherCalculationFrequency|null $otherCalculationFrequency
     *
     * @return $this
     */
    public function setOtherCalculationFrequency(?OtherCalculationFrequency $otherCalculationFrequency = null): self
    {
        $this->otherCalculationFrequency = $otherCalculationFrequency;

        return $this;
    }
}


