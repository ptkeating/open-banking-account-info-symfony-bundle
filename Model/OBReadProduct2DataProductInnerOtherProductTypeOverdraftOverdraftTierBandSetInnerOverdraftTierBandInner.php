<?php
/**
 * OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Account and Transaction API Specification
 *
 * Swagger for Account and Transaction API Specification
 *
 * The version of the OpenAPI document: 3.1.11
 * Contact: ServiceDesk@openbanking.org.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner model.
 *
 * Provides overdraft details for a specific tier or band
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner 
{
        /**
     * Unique and unambiguous identification of a  Tier Band for a overdraft.
     *
     * @var string|null
     * @SerializedName("Identification")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 35
     * )
     * @Assert\Length(
     *   min = 1
     * )
     */
    protected ?string $identification = null;

    /**
     * Minimum value of Overdraft Tier/Band
     *
     * @var string|null
     * @SerializedName("TierValueMin")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Regex("/^(-?\\d{1,14}){1}(\\.\\d{1,4}){0,1}$/")
     */
    protected ?string $tierValueMin = null;

    /**
     * Maximum value of Overdraft Tier/Band
     *
     * @var string|null
     * @SerializedName("TierValueMax")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Regex("/^(-?\\d{1,14}){1}(\\.\\d{1,4}){0,1}$/")
     */
    protected ?string $tierValueMax = null;

    /**
     * EAR means Effective Annual Rate and/or Equivalent Annual Rate (frequently used interchangeably), being the actual annual interest rate of an Overdraft.
     *
     * @var string|null
     * @SerializedName("EAR")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Regex("/^(-?\\d{1,3}){1}(\\.\\d{1,4}){0,1}$/")
     */
    protected ?string $eAR = null;

    /**
     * Specifies the minimum length of a band for a fixed overdraft agreement
     *
     * @var int|null
     * @SerializedName("AgreementLengthMin")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $agreementLengthMin = null;

    /**
     * Specifies the maximum length of a band for a fixed overdraft agreement
     *
     * @var int|null
     * @SerializedName("AgreementLengthMax")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $agreementLengthMax = null;

    /**
     * Specifies the period of a fixed length overdraft agreement
     *
     * @var string|null
     * @SerializedName("AgreementPeriod")
     * @Assert\Choice({ "PACT", "PDAY", "PHYR", "PMTH", "PQTR", "PWEK", "PYER" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $agreementPeriod = null;

    /**
     * Refers to which interest rate is applied when interests are tiered. For example, if an overdraft balance is �2k and the interest tiers are:- 0-�500 0.1%, 500-1000 0.2%, 1000-10000 0.5%, then the applicable interest rate could either be 0.5% of the entire balance (since the account balance sits in the top interest tier) or (0.1%*500)+(0.2%*500)+(0.5%*1000). In the 1st situation, we say the interest is applied to the �Whole� of the account balance,  and in the 2nd that it is �Tiered�.
     *
     * @var string|null
     * @SerializedName("OverdraftInterestChargingCoverage")
     * @Assert\Choice({ "INBA", "INTI", "INWH" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $overdraftInterestChargingCoverage = null;

    /**
     * Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it�s part of a government scheme, or whether the rate may vary dependent on the applicant�s circumstances.
     *
     * @var bool|null
     * @SerializedName("BankGuaranteedIndicator")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected ?bool $bankGuaranteedIndicator = null;

    /**
     * @var array|null
     * @SerializedName("Notes")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     */
    protected ?array $notes = null;

    /**
     * @var array|null
     * @SerializedName("OverdraftFeesCharges")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInnerOverdraftFeesChargesInner")
     * })
     * @Type("array<OpenAPI\Server\Model\OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInnerOverdraftFeesChargesInner>")
     */
    protected ?array $overdraftFeesCharges = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->identification = $data['identification'] ?? null;
        $this->tierValueMin = $data['tierValueMin'] ?? null;
        $this->tierValueMax = $data['tierValueMax'] ?? null;
        $this->eAR = $data['eAR'] ?? null;
        $this->agreementLengthMin = $data['agreementLengthMin'] ?? null;
        $this->agreementLengthMax = $data['agreementLengthMax'] ?? null;
        $this->agreementPeriod = $data['agreementPeriod'] ?? null;
        $this->overdraftInterestChargingCoverage = $data['overdraftInterestChargingCoverage'] ?? null;
        $this->bankGuaranteedIndicator = $data['bankGuaranteedIndicator'] ?? null;
        $this->notes = $data['notes'] ?? null;
        $this->overdraftFeesCharges = $data['overdraftFeesCharges'] ?? null;
    }

    /**
     * Gets identification.
     *
     * @return string|null
     */
    public function getIdentification(): ?string
    {
        return $this->identification;
    }

    /**
     * Sets identification.
     *
     * @param string|null $identification  Unique and unambiguous identification of a  Tier Band for a overdraft.
     *
     * @return $this
     */
    public function setIdentification(?string $identification = null): self
    {
        $this->identification = $identification;

        return $this;
    }

    /**
     * Gets tierValueMin.
     *
     * @return string|null
     */
    public function getTierValueMin(): ?string
    {
        return $this->tierValueMin;
    }

    /**
     * Sets tierValueMin.
     *
     * @param string|null $tierValueMin  Minimum value of Overdraft Tier/Band
     *
     * @return $this
     */
    public function setTierValueMin(?string $tierValueMin): self
    {
        $this->tierValueMin = $tierValueMin;

        return $this;
    }

    /**
     * Gets tierValueMax.
     *
     * @return string|null
     */
    public function getTierValueMax(): ?string
    {
        return $this->tierValueMax;
    }

    /**
     * Sets tierValueMax.
     *
     * @param string|null $tierValueMax  Maximum value of Overdraft Tier/Band
     *
     * @return $this
     */
    public function setTierValueMax(?string $tierValueMax = null): self
    {
        $this->tierValueMax = $tierValueMax;

        return $this;
    }

    /**
     * Gets eAR.
     *
     * @return string|null
     */
    public function getEAR(): ?string
    {
        return $this->eAR;
    }

    /**
     * Sets eAR.
     *
     * @param string|null $eAR  EAR means Effective Annual Rate and/or Equivalent Annual Rate (frequently used interchangeably), being the actual annual interest rate of an Overdraft.
     *
     * @return $this
     */
    public function setEAR(?string $eAR = null): self
    {
        $this->eAR = $eAR;

        return $this;
    }

    /**
     * Gets agreementLengthMin.
     *
     * @return int|null
     */
    public function getAgreementLengthMin(): ?int
    {
        return $this->agreementLengthMin;
    }

    /**
     * Sets agreementLengthMin.
     *
     * @param int|null $agreementLengthMin  Specifies the minimum length of a band for a fixed overdraft agreement
     *
     * @return $this
     */
    public function setAgreementLengthMin(?int $agreementLengthMin = null): self
    {
        $this->agreementLengthMin = $agreementLengthMin;

        return $this;
    }

    /**
     * Gets agreementLengthMax.
     *
     * @return int|null
     */
    public function getAgreementLengthMax(): ?int
    {
        return $this->agreementLengthMax;
    }

    /**
     * Sets agreementLengthMax.
     *
     * @param int|null $agreementLengthMax  Specifies the maximum length of a band for a fixed overdraft agreement
     *
     * @return $this
     */
    public function setAgreementLengthMax(?int $agreementLengthMax = null): self
    {
        $this->agreementLengthMax = $agreementLengthMax;

        return $this;
    }

    /**
     * Gets agreementPeriod.
     *
     * @return string|null
     */
    public function getAgreementPeriod(): ?string
    {
        return $this->agreementPeriod;
    }

    /**
     * Sets agreementPeriod.
     *
     * @param string|null $agreementPeriod  Specifies the period of a fixed length overdraft agreement
     *
     * @return $this
     */
    public function setAgreementPeriod(?string $agreementPeriod = null): self
    {
        $this->agreementPeriod = $agreementPeriod;

        return $this;
    }

    /**
     * Gets overdraftInterestChargingCoverage.
     *
     * @return string|null
     */
    public function getOverdraftInterestChargingCoverage(): ?string
    {
        return $this->overdraftInterestChargingCoverage;
    }

    /**
     * Sets overdraftInterestChargingCoverage.
     *
     * @param string|null $overdraftInterestChargingCoverage  Refers to which interest rate is applied when interests are tiered. For example, if an overdraft balance is �2k and the interest tiers are:- 0-�500 0.1%, 500-1000 0.2%, 1000-10000 0.5%, then the applicable interest rate could either be 0.5% of the entire balance (since the account balance sits in the top interest tier) or (0.1%*500)+(0.2%*500)+(0.5%*1000). In the 1st situation, we say the interest is applied to the �Whole� of the account balance,  and in the 2nd that it is �Tiered�.
     *
     * @return $this
     */
    public function setOverdraftInterestChargingCoverage(?string $overdraftInterestChargingCoverage = null): self
    {
        $this->overdraftInterestChargingCoverage = $overdraftInterestChargingCoverage;

        return $this;
    }

    /**
     * Gets bankGuaranteedIndicator.
     *
     * @return bool|null
     */
    public function isBankGuaranteedIndicator(): ?bool
    {
        return $this->bankGuaranteedIndicator;
    }

    /**
     * Sets bankGuaranteedIndicator.
     *
     * @param bool|null $bankGuaranteedIndicator  Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it�s part of a government scheme, or whether the rate may vary dependent on the applicant�s circumstances.
     *
     * @return $this
     */
    public function setBankGuaranteedIndicator(?bool $bankGuaranteedIndicator = null): self
    {
        $this->bankGuaranteedIndicator = $bankGuaranteedIndicator;

        return $this;
    }

    /**
     * Gets notes.
     *
     * @return array|null
     */
    public function getNotes(): ?array
    {
        return $this->notes;
    }

    /**
     * Sets notes.
     *
     * @param array|null $notes
     *
     * @return $this
     */
    public function setNotes(?array $notes = null): self
    {
        $this->notes = $notes;

        return $this;
    }

    /**
     * Gets overdraftFeesCharges.
     *
     * @return array|null
     */
    public function getOverdraftFeesCharges(): ?array
    {
        return $this->overdraftFeesCharges;
    }

    /**
     * Sets overdraftFeesCharges.
     *
     * @param array|null $overdraftFeesCharges
     *
     * @return $this
     */
    public function setOverdraftFeesCharges(?array $overdraftFeesCharges = null): self
    {
        $this->overdraftFeesCharges = $overdraftFeesCharges;

        return $this;
    }
}


