<?php
/**
 * OBCurrencyExchange5
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Account and Transaction API Specification
 *
 * Swagger for Account and Transaction API Specification
 *
 * The version of the OpenAPI document: 3.1.11
 * Contact: ServiceDesk@openbanking.org.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the OBCurrencyExchange5 model.
 *
 * Set of elements used to provide details on the currency exchange.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class OBCurrencyExchange5 
{
        /**
     * Currency from which an amount is to be converted in a currency conversion.
     *
     * @var string|null
     * @SerializedName("SourceCurrency")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Regex("/^[A-Z]{3,3}$/")
     */
    protected ?string $sourceCurrency = null;

    /**
     * Currency into which an amount is to be converted in a currency conversion.
     *
     * @var string|null
     * @SerializedName("TargetCurrency")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Regex("/^[A-Z]{3,3}$/")
     */
    protected ?string $targetCurrency = null;

    /**
     * Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP &#x3D; xxxCUR, the unit currency is GBP.
     *
     * @var string|null
     * @SerializedName("UnitCurrency")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Regex("/^[A-Z]{3,3}$/")
     */
    protected ?string $unitCurrency = null;

    /**
     * Factor used to convert an amount from one currency into another. This reflects the price at which one currency was bought with another currency. Usage: ExchangeRate expresses the ratio between UnitCurrency and QuotedCurrency (ExchangeRate &#x3D; UnitCurrency/QuotedCurrency).
     *
     * @var float|null
     * @SerializedName("ExchangeRate")
     * @Assert\NotNull()
     * @Assert\Type("float")
     * @Type("float")
     */
    protected ?float $exchangeRate = null;

    /**
     * Unique identification to unambiguously identify the foreign exchange contract.
     *
     * @var string|null
     * @SerializedName("ContractIdentification")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 35
     * )
     * @Assert\Length(
     *   min = 1
     * )
     */
    protected ?string $contractIdentification = null;

    /**
     * Date and time at which an exchange rate is quoted.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
     *
     * @var \DateTime|null
     * @SerializedName("QuotationDate")
     * @Assert\DateTime()
     * @Type("DateTime")
     */
    protected ?\DateTime $quotationDate = null;

    /**
     * @var OBCurrencyExchange5InstructedAmount|null
     * @SerializedName("InstructedAmount")
     * @Assert\Type("OpenAPI\Server\Model\OBCurrencyExchange5InstructedAmount")
     * @Type("OpenAPI\Server\Model\OBCurrencyExchange5InstructedAmount")
     */
    protected ?OBCurrencyExchange5InstructedAmount $instructedAmount = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->sourceCurrency = $data['sourceCurrency'] ?? null;
        $this->targetCurrency = $data['targetCurrency'] ?? null;
        $this->unitCurrency = $data['unitCurrency'] ?? null;
        $this->exchangeRate = $data['exchangeRate'] ?? null;
        $this->contractIdentification = $data['contractIdentification'] ?? null;
        $this->quotationDate = $data['quotationDate'] ?? null;
        $this->instructedAmount = $data['instructedAmount'] ?? null;
    }

    /**
     * Gets sourceCurrency.
     *
     * @return string|null
     */
    public function getSourceCurrency(): ?string
    {
        return $this->sourceCurrency;
    }

    /**
     * Sets sourceCurrency.
     *
     * @param string|null $sourceCurrency  Currency from which an amount is to be converted in a currency conversion.
     *
     * @return $this
     */
    public function setSourceCurrency(?string $sourceCurrency): self
    {
        $this->sourceCurrency = $sourceCurrency;

        return $this;
    }

    /**
     * Gets targetCurrency.
     *
     * @return string|null
     */
    public function getTargetCurrency(): ?string
    {
        return $this->targetCurrency;
    }

    /**
     * Sets targetCurrency.
     *
     * @param string|null $targetCurrency  Currency into which an amount is to be converted in a currency conversion.
     *
     * @return $this
     */
    public function setTargetCurrency(?string $targetCurrency = null): self
    {
        $this->targetCurrency = $targetCurrency;

        return $this;
    }

    /**
     * Gets unitCurrency.
     *
     * @return string|null
     */
    public function getUnitCurrency(): ?string
    {
        return $this->unitCurrency;
    }

    /**
     * Sets unitCurrency.
     *
     * @param string|null $unitCurrency  Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.
     *
     * @return $this
     */
    public function setUnitCurrency(?string $unitCurrency = null): self
    {
        $this->unitCurrency = $unitCurrency;

        return $this;
    }

    /**
     * Gets exchangeRate.
     *
     * @return float|null
     */
    public function getExchangeRate(): ?float
    {
        return $this->exchangeRate;
    }

    /**
     * Sets exchangeRate.
     *
     * @param float|null $exchangeRate  Factor used to convert an amount from one currency into another. This reflects the price at which one currency was bought with another currency. Usage: ExchangeRate expresses the ratio between UnitCurrency and QuotedCurrency (ExchangeRate = UnitCurrency/QuotedCurrency).
     *
     * @return $this
     */
    public function setExchangeRate(?float $exchangeRate): self
    {
        $this->exchangeRate = $exchangeRate;

        return $this;
    }

    /**
     * Gets contractIdentification.
     *
     * @return string|null
     */
    public function getContractIdentification(): ?string
    {
        return $this->contractIdentification;
    }

    /**
     * Sets contractIdentification.
     *
     * @param string|null $contractIdentification  Unique identification to unambiguously identify the foreign exchange contract.
     *
     * @return $this
     */
    public function setContractIdentification(?string $contractIdentification = null): self
    {
        $this->contractIdentification = $contractIdentification;

        return $this;
    }

    /**
     * Gets quotationDate.
     *
     * @return \DateTime|null
     */
    public function getQuotationDate(): ?\DateTime
    {
        return $this->quotationDate;
    }

    /**
     * Sets quotationDate.
     *
     * @param \DateTime|null $quotationDate  Date and time at which an exchange rate is quoted.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
     *
     * @return $this
     */
    public function setQuotationDate(?\DateTime $quotationDate = null): self
    {
        $this->quotationDate = $quotationDate;

        return $this;
    }

    /**
     * Gets instructedAmount.
     *
     * @return OBCurrencyExchange5InstructedAmount|null
     */
    public function getInstructedAmount(): ?OBCurrencyExchange5InstructedAmount
    {
        return $this->instructedAmount;
    }

    /**
     * Sets instructedAmount.
     *
     * @param OBCurrencyExchange5InstructedAmount|null $instructedAmount
     *
     * @return $this
     */
    public function setInstructedAmount(?OBCurrencyExchange5InstructedAmount $instructedAmount = null): self
    {
        $this->instructedAmount = $instructedAmount;

        return $this;
    }
}


