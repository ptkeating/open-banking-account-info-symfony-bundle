<?php
/**
 * OBReadProduct2DataProductInner
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Account and Transaction API Specification
 *
 * Swagger for Account and Transaction API Specification
 *
 * The version of the OpenAPI document: 3.1.11
 * Contact: ServiceDesk@openbanking.org.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the OBReadProduct2DataProductInner model.
 *
 * Product details associated with the Account
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class OBReadProduct2DataProductInner 
{
        /**
     * The name of the Product used for marketing purposes from a customer perspective. I.e. what the customer would recognise.
     *
     * @var string|null
     * @SerializedName("ProductName")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 350
     * )
     * @Assert\Length(
     *   min = 1
     * )
     */
    protected ?string $productName = null;

    /**
     * The unique ID that has been internally assigned by the financial institution to each of the current account banking products they market to their retail and/or small to medium enterprise (SME) customers.
     *
     * @var string|null
     * @SerializedName("ProductId")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 40
     * )
     * @Assert\Length(
     *   min = 1
     * )
     */
    protected ?string $productId = null;

    /**
     * A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
     *
     * @var string|null
     * @SerializedName("AccountId")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 40
     * )
     * @Assert\Length(
     *   min = 1
     * )
     */
    protected ?string $accountId = null;

    /**
     * Any secondary Identification which  supports Product Identifier to uniquely identify the current account banking products.
     *
     * @var string|null
     * @SerializedName("SecondaryProductId")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 70
     * )
     * @Assert\Length(
     *   min = 1
     * )
     */
    protected ?string $secondaryProductId = null;

    /**
     * Product type : Personal Current Account, Business Current Account
     *
     * @var string|null
     * @SerializedName("ProductType")
     * @Assert\NotNull()
     * @Assert\Choice({ "BusinessCurrentAccount", "CommercialCreditCard", "Other", "PersonalCurrentAccount", "SMELoan" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $productType = null;

    /**
     * Unique and unambiguous identification of a  Product Marketing State.
     *
     * @var string|null
     * @SerializedName("MarketingStateId")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 35
     * )
     * @Assert\Length(
     *   min = 1
     * )
     */
    protected ?string $marketingStateId = null;

    /**
     * @var OBReadProduct2DataProductInnerOtherProductType|null
     * @SerializedName("OtherProductType")
     * @Assert\Type("OpenAPI\Server\Model\OBReadProduct2DataProductInnerOtherProductType")
     * @Type("OpenAPI\Server\Model\OBReadProduct2DataProductInnerOtherProductType")
     */
    protected ?OBReadProduct2DataProductInnerOtherProductType $otherProductType = null;

    /**
     * @var OBBCAData1|null
     * @SerializedName("BCA")
     * @Assert\Type("OpenAPI\Server\Model\OBBCAData1")
     * @Type("OpenAPI\Server\Model\OBBCAData1")
     */
    protected ?OBBCAData1 $bCA = null;

    /**
     * @var OBPCAData1|null
     * @SerializedName("PCA")
     * @Assert\Type("OpenAPI\Server\Model\OBPCAData1")
     * @Type("OpenAPI\Server\Model\OBPCAData1")
     */
    protected ?OBPCAData1 $pCA = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->productName = $data['productName'] ?? null;
        $this->productId = $data['productId'] ?? null;
        $this->accountId = $data['accountId'] ?? null;
        $this->secondaryProductId = $data['secondaryProductId'] ?? null;
        $this->productType = $data['productType'] ?? null;
        $this->marketingStateId = $data['marketingStateId'] ?? null;
        $this->otherProductType = $data['otherProductType'] ?? null;
        $this->bCA = $data['bCA'] ?? null;
        $this->pCA = $data['pCA'] ?? null;
    }

    /**
     * Gets productName.
     *
     * @return string|null
     */
    public function getProductName(): ?string
    {
        return $this->productName;
    }

    /**
     * Sets productName.
     *
     * @param string|null $productName  The name of the Product used for marketing purposes from a customer perspective. I.e. what the customer would recognise.
     *
     * @return $this
     */
    public function setProductName(?string $productName = null): self
    {
        $this->productName = $productName;

        return $this;
    }

    /**
     * Gets productId.
     *
     * @return string|null
     */
    public function getProductId(): ?string
    {
        return $this->productId;
    }

    /**
     * Sets productId.
     *
     * @param string|null $productId  The unique ID that has been internally assigned by the financial institution to each of the current account banking products they market to their retail and/or small to medium enterprise (SME) customers.
     *
     * @return $this
     */
    public function setProductId(?string $productId = null): self
    {
        $this->productId = $productId;

        return $this;
    }

    /**
     * Gets accountId.
     *
     * @return string|null
     */
    public function getAccountId(): ?string
    {
        return $this->accountId;
    }

    /**
     * Sets accountId.
     *
     * @param string|null $accountId  A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
     *
     * @return $this
     */
    public function setAccountId(?string $accountId): self
    {
        $this->accountId = $accountId;

        return $this;
    }

    /**
     * Gets secondaryProductId.
     *
     * @return string|null
     */
    public function getSecondaryProductId(): ?string
    {
        return $this->secondaryProductId;
    }

    /**
     * Sets secondaryProductId.
     *
     * @param string|null $secondaryProductId  Any secondary Identification which  supports Product Identifier to uniquely identify the current account banking products.
     *
     * @return $this
     */
    public function setSecondaryProductId(?string $secondaryProductId = null): self
    {
        $this->secondaryProductId = $secondaryProductId;

        return $this;
    }

    /**
     * Gets productType.
     *
     * @return string|null
     */
    public function getProductType(): ?string
    {
        return $this->productType;
    }

    /**
     * Sets productType.
     *
     * @param string|null $productType  Product type : Personal Current Account, Business Current Account
     *
     * @return $this
     */
    public function setProductType(?string $productType): self
    {
        $this->productType = $productType;

        return $this;
    }

    /**
     * Gets marketingStateId.
     *
     * @return string|null
     */
    public function getMarketingStateId(): ?string
    {
        return $this->marketingStateId;
    }

    /**
     * Sets marketingStateId.
     *
     * @param string|null $marketingStateId  Unique and unambiguous identification of a  Product Marketing State.
     *
     * @return $this
     */
    public function setMarketingStateId(?string $marketingStateId = null): self
    {
        $this->marketingStateId = $marketingStateId;

        return $this;
    }

    /**
     * Gets otherProductType.
     *
     * @return OBReadProduct2DataProductInnerOtherProductType|null
     */
    public function getOtherProductType(): ?OBReadProduct2DataProductInnerOtherProductType
    {
        return $this->otherProductType;
    }

    /**
     * Sets otherProductType.
     *
     * @param OBReadProduct2DataProductInnerOtherProductType|null $otherProductType
     *
     * @return $this
     */
    public function setOtherProductType(?OBReadProduct2DataProductInnerOtherProductType $otherProductType = null): self
    {
        $this->otherProductType = $otherProductType;

        return $this;
    }

    /**
     * Gets bCA.
     *
     * @return OBBCAData1|null
     */
    public function getBCA(): ?OBBCAData1
    {
        return $this->bCA;
    }

    /**
     * Sets bCA.
     *
     * @param OBBCAData1|null $bCA
     *
     * @return $this
     */
    public function setBCA(?OBBCAData1 $bCA = null): self
    {
        $this->bCA = $bCA;

        return $this;
    }

    /**
     * Gets pCA.
     *
     * @return OBPCAData1|null
     */
    public function getPCA(): ?OBPCAData1
    {
        return $this->pCA;
    }

    /**
     * Sets pCA.
     *
     * @param OBPCAData1|null $pCA
     *
     * @return $this
     */
    public function setPCA(?OBPCAData1 $pCA = null): self
    {
        $this->pCA = $pCA;

        return $this;
    }
}


