<?php
/**
 * OBTransactionCardInstrument1
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Account and Transaction API Specification
 *
 * Swagger for Account and Transaction API Specification
 *
 * The version of the OpenAPI document: 3.1.11
 * Contact: ServiceDesk@openbanking.org.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the OBTransactionCardInstrument1 model.
 *
 * Set of elements to describe the card instrument used in the transaction.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class OBTransactionCardInstrument1 
{
        /**
     * Name of the card scheme.
     *
     * @var string|null
     * @SerializedName("CardSchemeName")
     * @Assert\NotNull()
     * @Assert\Choice({ "AmericanExpress", "Diners", "Discover", "MasterCard", "VISA" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $cardSchemeName = null;

    /**
     * The card authorisation type.
     *
     * @var string|null
     * @SerializedName("AuthorisationType")
     * @Assert\Choice({ "ConsumerDevice", "Contactless", "None", "PIN" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $authorisationType = null;

    /**
     * Name of the cardholder using the card instrument.
     *
     * @var string|null
     * @SerializedName("Name")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 70
     * )
     * @Assert\Length(
     *   min = 1
     * )
     */
    protected ?string $name = null;

    /**
     * Identification assigned by an institution to identify the card instrument used in the transaction. This identification is known by the account owner, and may be masked.
     *
     * @var string|null
     * @SerializedName("Identification")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 34
     * )
     * @Assert\Length(
     *   min = 1
     * )
     */
    protected ?string $identification = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->cardSchemeName = $data['cardSchemeName'] ?? null;
        $this->authorisationType = $data['authorisationType'] ?? null;
        $this->name = $data['name'] ?? null;
        $this->identification = $data['identification'] ?? null;
    }

    /**
     * Gets cardSchemeName.
     *
     * @return string|null
     */
    public function getCardSchemeName(): ?string
    {
        return $this->cardSchemeName;
    }

    /**
     * Sets cardSchemeName.
     *
     * @param string|null $cardSchemeName  Name of the card scheme.
     *
     * @return $this
     */
    public function setCardSchemeName(?string $cardSchemeName): self
    {
        $this->cardSchemeName = $cardSchemeName;

        return $this;
    }

    /**
     * Gets authorisationType.
     *
     * @return string|null
     */
    public function getAuthorisationType(): ?string
    {
        return $this->authorisationType;
    }

    /**
     * Sets authorisationType.
     *
     * @param string|null $authorisationType  The card authorisation type.
     *
     * @return $this
     */
    public function setAuthorisationType(?string $authorisationType = null): self
    {
        $this->authorisationType = $authorisationType;

        return $this;
    }

    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets name.
     *
     * @param string|null $name  Name of the cardholder using the card instrument.
     *
     * @return $this
     */
    public function setName(?string $name = null): self
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Gets identification.
     *
     * @return string|null
     */
    public function getIdentification(): ?string
    {
        return $this->identification;
    }

    /**
     * Sets identification.
     *
     * @param string|null $identification  Identification assigned by an institution to identify the card instrument used in the transaction. This identification is known by the account owner, and may be masked.
     *
     * @return $this
     */
    public function setIdentification(?string $identification = null): self
    {
        $this->identification = $identification;

        return $this;
    }
}


