<?php
/**
 * OBReadProduct2DataProductInnerOtherProductTypeOtherFeesChargesInnerFeeChargeDetailInnerFeeApplicableRange
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Account and Transaction API Specification
 *
 * Swagger for Account and Transaction API Specification
 *
 * The version of the OpenAPI document: 3.1.11
 * Contact: ServiceDesk@openbanking.org.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the OBReadProduct2DataProductInnerOtherProductTypeOtherFeesChargesInnerFeeChargeDetailInnerFeeApplicableRange model.
 *
 * Range or amounts or rates for which the fee/charge applies
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class OBReadProduct2DataProductInnerOtherProductTypeOtherFeesChargesInnerFeeChargeDetailInnerFeeApplicableRange 
{
        /**
     * Minimum Amount on which fee/charge is applicable (where it is expressed as an amount)
     *
     * @var string|null
     * @SerializedName("MinimumAmount")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Regex("/^(-?\\d{1,14}){1}(\\.\\d{1,4}){0,1}$/")
     */
    protected ?string $minimumAmount = null;

    /**
     * Maximum Amount on which fee is applicable (where it is expressed as an amount)
     *
     * @var string|null
     * @SerializedName("MaximumAmount")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Regex("/^(-?\\d{1,14}){1}(\\.\\d{1,4}){0,1}$/")
     */
    protected ?string $maximumAmount = null;

    /**
     * Minimum rate on which fee/charge is applicable(where it is expressed as an rate)
     *
     * @var string|null
     * @SerializedName("MinimumRate")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Regex("/^(-?\\d{1,3}){1}(\\.\\d{1,4}){0,1}$/")
     */
    protected ?string $minimumRate = null;

    /**
     * Maximum rate on which fee/charge is applicable(where it is expressed as an rate)
     *
     * @var string|null
     * @SerializedName("MaximumRate")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Regex("/^(-?\\d{1,3}){1}(\\.\\d{1,4}){0,1}$/")
     */
    protected ?string $maximumRate = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->minimumAmount = $data['minimumAmount'] ?? null;
        $this->maximumAmount = $data['maximumAmount'] ?? null;
        $this->minimumRate = $data['minimumRate'] ?? null;
        $this->maximumRate = $data['maximumRate'] ?? null;
    }

    /**
     * Gets minimumAmount.
     *
     * @return string|null
     */
    public function getMinimumAmount(): ?string
    {
        return $this->minimumAmount;
    }

    /**
     * Sets minimumAmount.
     *
     * @param string|null $minimumAmount  Minimum Amount on which fee/charge is applicable (where it is expressed as an amount)
     *
     * @return $this
     */
    public function setMinimumAmount(?string $minimumAmount = null): self
    {
        $this->minimumAmount = $minimumAmount;

        return $this;
    }

    /**
     * Gets maximumAmount.
     *
     * @return string|null
     */
    public function getMaximumAmount(): ?string
    {
        return $this->maximumAmount;
    }

    /**
     * Sets maximumAmount.
     *
     * @param string|null $maximumAmount  Maximum Amount on which fee is applicable (where it is expressed as an amount)
     *
     * @return $this
     */
    public function setMaximumAmount(?string $maximumAmount = null): self
    {
        $this->maximumAmount = $maximumAmount;

        return $this;
    }

    /**
     * Gets minimumRate.
     *
     * @return string|null
     */
    public function getMinimumRate(): ?string
    {
        return $this->minimumRate;
    }

    /**
     * Sets minimumRate.
     *
     * @param string|null $minimumRate  Minimum rate on which fee/charge is applicable(where it is expressed as an rate)
     *
     * @return $this
     */
    public function setMinimumRate(?string $minimumRate = null): self
    {
        $this->minimumRate = $minimumRate;

        return $this;
    }

    /**
     * Gets maximumRate.
     *
     * @return string|null
     */
    public function getMaximumRate(): ?string
    {
        return $this->maximumRate;
    }

    /**
     * Sets maximumRate.
     *
     * @param string|null $maximumRate  Maximum rate on which fee/charge is applicable(where it is expressed as an rate)
     *
     * @return $this
     */
    public function setMaximumRate(?string $maximumRate = null): self
    {
        $this->maximumRate = $maximumRate;

        return $this;
    }
}


