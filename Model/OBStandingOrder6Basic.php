<?php
/**
 * OBStandingOrder6Basic
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Account and Transaction API Specification
 *
 * Swagger for Account and Transaction API Specification
 *
 * The version of the OpenAPI document: 3.1.11
 * Contact: ServiceDesk@openbanking.org.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the OBStandingOrder6Basic model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class OBStandingOrder6Basic 
{
        /**
     * A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
     *
     * @var string|null
     * @SerializedName("AccountId")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 40
     * )
     * @Assert\Length(
     *   min = 1
     * )
     */
    protected ?string $accountId = null;

    /**
     * A unique and immutable identifier used to identify the standing order resource. This identifier has no meaning to the account owner.
     *
     * @var string|null
     * @SerializedName("StandingOrderId")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 40
     * )
     * @Assert\Length(
     *   min = 1
     * )
     */
    protected ?string $standingOrderId = null;

    /**
     * Individual Definitions: NotKnown - Not Known EvryDay - Every day EvryWorkgDay - Every working day IntrvlDay - An interval specified in number of calendar days (02 to 31) IntrvlWkDay - An interval specified in weeks (01 to 09), and the day within the week (01 to 07) WkInMnthDay - A monthly interval, specifying the week of the month (01 to 05) and day within the week (01 to 07) IntrvlMnthDay - An interval specified in months (between 01 to 06, 12, 24), specifying the day within the month (-05 to -01, 01 to 31) QtrDay - Quarterly (either ENGLISH, SCOTTISH, or RECEIVED) ENGLISH &#x3D; Paid on the 25th March, 24th June, 29th September and 25th December. SCOTTISH &#x3D; Paid on the 2nd February, 15th May, 1st August and 11th November. RECEIVED &#x3D; Paid on the 20th March, 19th June, 24th September and 20th December. Individual Patterns: NotKnown (ScheduleCode) EvryDay (ScheduleCode) EvryWorkgDay (ScheduleCode) IntrvlDay:NoOfDay (ScheduleCode + NoOfDay) IntrvlWkDay:IntervalInWeeks:DayInWeek (ScheduleCode + IntervalInWeeks + DayInWeek) WkInMnthDay:WeekInMonth:DayInWeek (ScheduleCode + WeekInMonth + DayInWeek) IntrvlMnthDay:IntervalInMonths:DayInMonth (ScheduleCode + IntervalInMonths + DayInMonth) QtrDay: + either (ENGLISH, SCOTTISH or RECEIVED) ScheduleCode + QuarterDay The regular expression for this element combines five smaller versions for each permitted pattern. To aid legibility - the components are presented individually here: NotKnown EvryDay EvryWorkgDay IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]) IntrvlWkDay:0[1-9]:0[1-7] WkInMnthDay:0[1-5]:0[1-7] IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]) QtrDay:(ENGLISH|SCOTTISH|RECEIVED) Full Regular Expression: ^(NotKnown)$|^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$
     *
     * @var string|null
     * @SerializedName("Frequency")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Regex("/^(NotKnown)$|^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$/")
     */
    protected ?string $frequency = null;

    /**
     * Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction. Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money. If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor&#39;s reference or payment remittance identification should be quoted in the end-to-end transaction identification.
     *
     * @var string|null
     * @SerializedName("Reference")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 35
     * )
     * @Assert\Length(
     *   min = 1
     * )
     */
    protected ?string $reference = null;

    /**
     * The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
     *
     * @var \DateTime|null
     * @SerializedName("FirstPaymentDateTime")
     * @Assert\DateTime()
     * @Type("DateTime")
     */
    protected ?\DateTime $firstPaymentDateTime = null;

    /**
     * The date on which the next payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
     *
     * @var \DateTime|null
     * @SerializedName("NextPaymentDateTime")
     * @Assert\DateTime()
     * @Type("DateTime")
     */
    protected ?\DateTime $nextPaymentDateTime = null;

    /**
     * The date on which the last (most recent) payment for a Standing Order schedule was made.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
     *
     * @var \DateTime|null
     * @SerializedName("LastPaymentDateTime")
     * @Assert\DateTime()
     * @Type("DateTime")
     */
    protected ?\DateTime $lastPaymentDateTime = null;

    /**
     * The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
     *
     * @var \DateTime|null
     * @SerializedName("FinalPaymentDateTime")
     * @Assert\DateTime()
     * @Type("DateTime")
     */
    protected ?\DateTime $finalPaymentDateTime = null;

    /**
     * Number of the payments that will be made in completing this frequency sequence including any executed since the sequence start date.
     *
     * @var string|null
     * @SerializedName("NumberOfPayments")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 35
     * )
     * @Assert\Length(
     *   min = 1
     * )
     */
    protected ?string $numberOfPayments = null;

    /**
     * @var OBExternalStandingOrderStatus1Code|null
     * @SerializedName("StandingOrderStatusCode")
     * @Assert\Type("OpenAPI\Server\Model\OBExternalStandingOrderStatus1Code")
     * @Type("OpenAPI\Server\Model\OBExternalStandingOrderStatus1Code")
     */
    protected ?OBExternalStandingOrderStatus1Code $standingOrderStatusCode = null;

    /**
     * @var OBActiveOrHistoricCurrencyAndAmount2|null
     * @SerializedName("FirstPaymentAmount")
     * @Assert\Type("OpenAPI\Server\Model\OBActiveOrHistoricCurrencyAndAmount2")
     * @Type("OpenAPI\Server\Model\OBActiveOrHistoricCurrencyAndAmount2")
     */
    protected ?OBActiveOrHistoricCurrencyAndAmount2 $firstPaymentAmount = null;

    /**
     * @var OBActiveOrHistoricCurrencyAndAmount3|null
     * @SerializedName("NextPaymentAmount")
     * @Assert\Type("OpenAPI\Server\Model\OBActiveOrHistoricCurrencyAndAmount3")
     * @Type("OpenAPI\Server\Model\OBActiveOrHistoricCurrencyAndAmount3")
     */
    protected ?OBActiveOrHistoricCurrencyAndAmount3 $nextPaymentAmount = null;

    /**
     * @var OBActiveOrHistoricCurrencyAndAmount11|null
     * @SerializedName("LastPaymentAmount")
     * @Assert\Type("OpenAPI\Server\Model\OBActiveOrHistoricCurrencyAndAmount11")
     * @Type("OpenAPI\Server\Model\OBActiveOrHistoricCurrencyAndAmount11")
     */
    protected ?OBActiveOrHistoricCurrencyAndAmount11 $lastPaymentAmount = null;

    /**
     * @var OBActiveOrHistoricCurrencyAndAmount4|null
     * @SerializedName("FinalPaymentAmount")
     * @Assert\Type("OpenAPI\Server\Model\OBActiveOrHistoricCurrencyAndAmount4")
     * @Type("OpenAPI\Server\Model\OBActiveOrHistoricCurrencyAndAmount4")
     */
    protected ?OBActiveOrHistoricCurrencyAndAmount4 $finalPaymentAmount = null;

    /**
     * Additional information that can not be captured in the structured fields and/or any other specific block.
     *
     * @var array|null
     * @SerializedName("SupplementaryData")
     * @Assert\All({
     *   @Assert\Type("AnyType")
     * })
     * @Type("array<string, AnyType>")
     */
    protected ?array $supplementaryData = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->accountId = $data['accountId'] ?? null;
        $this->standingOrderId = $data['standingOrderId'] ?? null;
        $this->frequency = $data['frequency'] ?? null;
        $this->reference = $data['reference'] ?? null;
        $this->firstPaymentDateTime = $data['firstPaymentDateTime'] ?? null;
        $this->nextPaymentDateTime = $data['nextPaymentDateTime'] ?? null;
        $this->lastPaymentDateTime = $data['lastPaymentDateTime'] ?? null;
        $this->finalPaymentDateTime = $data['finalPaymentDateTime'] ?? null;
        $this->numberOfPayments = $data['numberOfPayments'] ?? null;
        $this->standingOrderStatusCode = $data['standingOrderStatusCode'] ?? null;
        $this->firstPaymentAmount = $data['firstPaymentAmount'] ?? null;
        $this->nextPaymentAmount = $data['nextPaymentAmount'] ?? null;
        $this->lastPaymentAmount = $data['lastPaymentAmount'] ?? null;
        $this->finalPaymentAmount = $data['finalPaymentAmount'] ?? null;
        $this->supplementaryData = $data['supplementaryData'] ?? null;
    }

    /**
     * Gets accountId.
     *
     * @return string|null
     */
    public function getAccountId(): ?string
    {
        return $this->accountId;
    }

    /**
     * Sets accountId.
     *
     * @param string|null $accountId  A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
     *
     * @return $this
     */
    public function setAccountId(?string $accountId): self
    {
        $this->accountId = $accountId;

        return $this;
    }

    /**
     * Gets standingOrderId.
     *
     * @return string|null
     */
    public function getStandingOrderId(): ?string
    {
        return $this->standingOrderId;
    }

    /**
     * Sets standingOrderId.
     *
     * @param string|null $standingOrderId  A unique and immutable identifier used to identify the standing order resource. This identifier has no meaning to the account owner.
     *
     * @return $this
     */
    public function setStandingOrderId(?string $standingOrderId = null): self
    {
        $this->standingOrderId = $standingOrderId;

        return $this;
    }

    /**
     * Gets frequency.
     *
     * @return string|null
     */
    public function getFrequency(): ?string
    {
        return $this->frequency;
    }

    /**
     * Sets frequency.
     *
     * @param string|null $frequency  Individual Definitions: NotKnown - Not Known EvryDay - Every day EvryWorkgDay - Every working day IntrvlDay - An interval specified in number of calendar days (02 to 31) IntrvlWkDay - An interval specified in weeks (01 to 09), and the day within the week (01 to 07) WkInMnthDay - A monthly interval, specifying the week of the month (01 to 05) and day within the week (01 to 07) IntrvlMnthDay - An interval specified in months (between 01 to 06, 12, 24), specifying the day within the month (-05 to -01, 01 to 31) QtrDay - Quarterly (either ENGLISH, SCOTTISH, or RECEIVED) ENGLISH = Paid on the 25th March, 24th June, 29th September and 25th December. SCOTTISH = Paid on the 2nd February, 15th May, 1st August and 11th November. RECEIVED = Paid on the 20th March, 19th June, 24th September and 20th December. Individual Patterns: NotKnown (ScheduleCode) EvryDay (ScheduleCode) EvryWorkgDay (ScheduleCode) IntrvlDay:NoOfDay (ScheduleCode + NoOfDay) IntrvlWkDay:IntervalInWeeks:DayInWeek (ScheduleCode + IntervalInWeeks + DayInWeek) WkInMnthDay:WeekInMonth:DayInWeek (ScheduleCode + WeekInMonth + DayInWeek) IntrvlMnthDay:IntervalInMonths:DayInMonth (ScheduleCode + IntervalInMonths + DayInMonth) QtrDay: + either (ENGLISH, SCOTTISH or RECEIVED) ScheduleCode + QuarterDay The regular expression for this element combines five smaller versions for each permitted pattern. To aid legibility - the components are presented individually here: NotKnown EvryDay EvryWorkgDay IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]) IntrvlWkDay:0[1-9]:0[1-7] WkInMnthDay:0[1-5]:0[1-7] IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]) QtrDay:(ENGLISH|SCOTTISH|RECEIVED) Full Regular Expression: ^(NotKnown)$|^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$
     *
     * @return $this
     */
    public function setFrequency(?string $frequency): self
    {
        $this->frequency = $frequency;

        return $this;
    }

    /**
     * Gets reference.
     *
     * @return string|null
     */
    public function getReference(): ?string
    {
        return $this->reference;
    }

    /**
     * Sets reference.
     *
     * @param string|null $reference  Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction. Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money. If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
     *
     * @return $this
     */
    public function setReference(?string $reference = null): self
    {
        $this->reference = $reference;

        return $this;
    }

    /**
     * Gets firstPaymentDateTime.
     *
     * @return \DateTime|null
     */
    public function getFirstPaymentDateTime(): ?\DateTime
    {
        return $this->firstPaymentDateTime;
    }

    /**
     * Sets firstPaymentDateTime.
     *
     * @param \DateTime|null $firstPaymentDateTime  The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
     *
     * @return $this
     */
    public function setFirstPaymentDateTime(?\DateTime $firstPaymentDateTime = null): self
    {
        $this->firstPaymentDateTime = $firstPaymentDateTime;

        return $this;
    }

    /**
     * Gets nextPaymentDateTime.
     *
     * @return \DateTime|null
     */
    public function getNextPaymentDateTime(): ?\DateTime
    {
        return $this->nextPaymentDateTime;
    }

    /**
     * Sets nextPaymentDateTime.
     *
     * @param \DateTime|null $nextPaymentDateTime  The date on which the next payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
     *
     * @return $this
     */
    public function setNextPaymentDateTime(?\DateTime $nextPaymentDateTime = null): self
    {
        $this->nextPaymentDateTime = $nextPaymentDateTime;

        return $this;
    }

    /**
     * Gets lastPaymentDateTime.
     *
     * @return \DateTime|null
     */
    public function getLastPaymentDateTime(): ?\DateTime
    {
        return $this->lastPaymentDateTime;
    }

    /**
     * Sets lastPaymentDateTime.
     *
     * @param \DateTime|null $lastPaymentDateTime  The date on which the last (most recent) payment for a Standing Order schedule was made.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
     *
     * @return $this
     */
    public function setLastPaymentDateTime(?\DateTime $lastPaymentDateTime = null): self
    {
        $this->lastPaymentDateTime = $lastPaymentDateTime;

        return $this;
    }

    /**
     * Gets finalPaymentDateTime.
     *
     * @return \DateTime|null
     */
    public function getFinalPaymentDateTime(): ?\DateTime
    {
        return $this->finalPaymentDateTime;
    }

    /**
     * Sets finalPaymentDateTime.
     *
     * @param \DateTime|null $finalPaymentDateTime  The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
     *
     * @return $this
     */
    public function setFinalPaymentDateTime(?\DateTime $finalPaymentDateTime = null): self
    {
        $this->finalPaymentDateTime = $finalPaymentDateTime;

        return $this;
    }

    /**
     * Gets numberOfPayments.
     *
     * @return string|null
     */
    public function getNumberOfPayments(): ?string
    {
        return $this->numberOfPayments;
    }

    /**
     * Sets numberOfPayments.
     *
     * @param string|null $numberOfPayments  Number of the payments that will be made in completing this frequency sequence including any executed since the sequence start date.
     *
     * @return $this
     */
    public function setNumberOfPayments(?string $numberOfPayments = null): self
    {
        $this->numberOfPayments = $numberOfPayments;

        return $this;
    }

    /**
     * Gets standingOrderStatusCode.
     *
     * @return OBExternalStandingOrderStatus1Code|null
     */
    public function getStandingOrderStatusCode(): ?OBExternalStandingOrderStatus1Code
    {
        return $this->standingOrderStatusCode;
    }

    /**
     * Sets standingOrderStatusCode.
     *
     * @param OBExternalStandingOrderStatus1Code|null $standingOrderStatusCode
     *
     * @return $this
     */
    public function setStandingOrderStatusCode(?OBExternalStandingOrderStatus1Code $standingOrderStatusCode = null): self
    {
        $this->standingOrderStatusCode = $standingOrderStatusCode;

        return $this;
    }

    /**
     * Gets firstPaymentAmount.
     *
     * @return OBActiveOrHistoricCurrencyAndAmount2|null
     */
    public function getFirstPaymentAmount(): ?OBActiveOrHistoricCurrencyAndAmount2
    {
        return $this->firstPaymentAmount;
    }

    /**
     * Sets firstPaymentAmount.
     *
     * @param OBActiveOrHistoricCurrencyAndAmount2|null $firstPaymentAmount
     *
     * @return $this
     */
    public function setFirstPaymentAmount(?OBActiveOrHistoricCurrencyAndAmount2 $firstPaymentAmount = null): self
    {
        $this->firstPaymentAmount = $firstPaymentAmount;

        return $this;
    }

    /**
     * Gets nextPaymentAmount.
     *
     * @return OBActiveOrHistoricCurrencyAndAmount3|null
     */
    public function getNextPaymentAmount(): ?OBActiveOrHistoricCurrencyAndAmount3
    {
        return $this->nextPaymentAmount;
    }

    /**
     * Sets nextPaymentAmount.
     *
     * @param OBActiveOrHistoricCurrencyAndAmount3|null $nextPaymentAmount
     *
     * @return $this
     */
    public function setNextPaymentAmount(?OBActiveOrHistoricCurrencyAndAmount3 $nextPaymentAmount = null): self
    {
        $this->nextPaymentAmount = $nextPaymentAmount;

        return $this;
    }

    /**
     * Gets lastPaymentAmount.
     *
     * @return OBActiveOrHistoricCurrencyAndAmount11|null
     */
    public function getLastPaymentAmount(): ?OBActiveOrHistoricCurrencyAndAmount11
    {
        return $this->lastPaymentAmount;
    }

    /**
     * Sets lastPaymentAmount.
     *
     * @param OBActiveOrHistoricCurrencyAndAmount11|null $lastPaymentAmount
     *
     * @return $this
     */
    public function setLastPaymentAmount(?OBActiveOrHistoricCurrencyAndAmount11 $lastPaymentAmount = null): self
    {
        $this->lastPaymentAmount = $lastPaymentAmount;

        return $this;
    }

    /**
     * Gets finalPaymentAmount.
     *
     * @return OBActiveOrHistoricCurrencyAndAmount4|null
     */
    public function getFinalPaymentAmount(): ?OBActiveOrHistoricCurrencyAndAmount4
    {
        return $this->finalPaymentAmount;
    }

    /**
     * Sets finalPaymentAmount.
     *
     * @param OBActiveOrHistoricCurrencyAndAmount4|null $finalPaymentAmount
     *
     * @return $this
     */
    public function setFinalPaymentAmount(?OBActiveOrHistoricCurrencyAndAmount4 $finalPaymentAmount = null): self
    {
        $this->finalPaymentAmount = $finalPaymentAmount;

        return $this;
    }

    /**
     * Gets supplementaryData.
     *
     * @return array|null
     */
    public function getSupplementaryData(): ?array
    {
        return $this->supplementaryData;
    }

    /**
     * Sets supplementaryData.
     *
     * @param array|null $supplementaryData  Additional information that can not be captured in the structured fields and/or any other specific block.
     *
     * @return $this
     */
    public function setSupplementaryData(?array $supplementaryData = null): self
    {
        $this->supplementaryData = $supplementaryData;

        return $this;
    }
}


