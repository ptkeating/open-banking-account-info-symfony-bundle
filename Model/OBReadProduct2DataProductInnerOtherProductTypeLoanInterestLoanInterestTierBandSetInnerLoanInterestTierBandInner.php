<?php
/**
 * OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Account and Transaction API Specification
 *
 * Swagger for Account and Transaction API Specification
 *
 * The version of the OpenAPI document: 3.1.11
 * Contact: ServiceDesk@openbanking.org.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner model.
 *
 * Tier Band Details
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner 
{
        /**
     * Unique and unambiguous identification of a  Tier Band for a SME Loan.
     *
     * @var string|null
     * @SerializedName("Identification")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 35
     * )
     * @Assert\Length(
     *   min = 1
     * )
     */
    protected ?string $identification = null;

    /**
     * Minimum loan value for which the loan interest tier applies.
     *
     * @var string|null
     * @SerializedName("TierValueMinimum")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Regex("/^(-?\\d{1,14}){1}(\\.\\d{1,4}){0,1}$/")
     */
    protected ?string $tierValueMinimum = null;

    /**
     * Maximum loan value for which the loan interest tier applies.
     *
     * @var string|null
     * @SerializedName("TierValueMaximum")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Regex("/^(-?\\d{1,14}){1}(\\.\\d{1,4}){0,1}$/")
     */
    protected ?string $tierValueMaximum = null;

    /**
     * Minimum loan term for which the loan interest tier applies.
     *
     * @var int|null
     * @SerializedName("TierValueMinTerm")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $tierValueMinTerm = null;

    /**
     * The unit of period (days, weeks, months etc.) of the Minimum Term
     *
     * @var string|null
     * @SerializedName("MinTermPeriod")
     * @Assert\NotNull()
     * @Assert\Choice({ "PACT", "PDAY", "PHYR", "PMTH", "PQTR", "PWEK", "PYER" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $minTermPeriod = null;

    /**
     * Maximum loan term for which the loan interest tier applies.
     *
     * @var int|null
     * @SerializedName("TierValueMaxTerm")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $tierValueMaxTerm = null;

    /**
     * The unit of period (days, weeks, months etc.) of the Maximum Term
     *
     * @var string|null
     * @SerializedName("MaxTermPeriod")
     * @Assert\Choice({ "PACT", "PDAY", "PHYR", "PMTH", "PQTR", "PWEK", "PYER" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $maxTermPeriod = null;

    /**
     * @var OBInterestFixedVariableType1Code|null
     * @SerializedName("FixedVariableInterestRateType")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\Type("OpenAPI\Server\Model\OBInterestFixedVariableType1Code")
     * @Type("OpenAPI\Server\Model\OBInterestFixedVariableType1Code")
     */
    protected ?OBInterestFixedVariableType1Code $fixedVariableInterestRateType = null;

    /**
     * The annual equivalent rate (AER) is interest that is calculated under the assumption that any interest paid is combined with the original balance and the next interest payment will be based on the slightly higher account balance. Overall, this means that interest can be compounded several times in a year depending on the number of times that interest payments are made.  For SME Loan, this APR is the representative APR which includes any account fees.
     *
     * @var string|null
     * @SerializedName("RepAPR")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Regex("/^(-?\\d{1,3}){1}(\\.\\d{1,4}){0,1}$/")
     */
    protected ?string $repAPR = null;

    /**
     * Interest rate types, other than APR, which financial institutions may use to describe the annual interest rate payable for the SME Loan.
     *
     * @var string|null
     * @SerializedName("LoanProviderInterestRateType")
     * @Assert\Choice({ "INBB", "INFR", "INGR", "INLR", "INNE", "INOT" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $loanProviderInterestRateType = null;

    /**
     * Loan provider Interest for the SME Loan product
     *
     * @var string|null
     * @SerializedName("LoanProviderInterestRate")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Regex("/^(-?\\d{1,3}){1}(\\.\\d{1,4}){0,1}$/")
     */
    protected ?string $loanProviderInterestRate = null;

    /**
     * @var array|null
     * @SerializedName("Notes")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     */
    protected ?array $notes = null;

    /**
     * @var OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInnerOtherLoanProviderInterestRateType|null
     * @SerializedName("OtherLoanProviderInterestRateType")
     * @Assert\Type("OpenAPI\Server\Model\OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInnerOtherLoanProviderInterestRateType")
     * @Type("OpenAPI\Server\Model\OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInnerOtherLoanProviderInterestRateType")
     */
    protected ?OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInnerOtherLoanProviderInterestRateType $otherLoanProviderInterestRateType = null;

    /**
     * @var array|null
     * @SerializedName("LoanInterestFeesCharges")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInnerLoanInterestFeesChargesInner")
     * })
     * @Type("array<OpenAPI\Server\Model\OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInnerLoanInterestFeesChargesInner>")
     */
    protected ?array $loanInterestFeesCharges = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->identification = $data['identification'] ?? null;
        $this->tierValueMinimum = $data['tierValueMinimum'] ?? null;
        $this->tierValueMaximum = $data['tierValueMaximum'] ?? null;
        $this->tierValueMinTerm = $data['tierValueMinTerm'] ?? null;
        $this->minTermPeriod = $data['minTermPeriod'] ?? null;
        $this->tierValueMaxTerm = $data['tierValueMaxTerm'] ?? null;
        $this->maxTermPeriod = $data['maxTermPeriod'] ?? null;
        $this->fixedVariableInterestRateType = $data['fixedVariableInterestRateType'] ?? null;
        $this->repAPR = $data['repAPR'] ?? null;
        $this->loanProviderInterestRateType = $data['loanProviderInterestRateType'] ?? null;
        $this->loanProviderInterestRate = $data['loanProviderInterestRate'] ?? null;
        $this->notes = $data['notes'] ?? null;
        $this->otherLoanProviderInterestRateType = $data['otherLoanProviderInterestRateType'] ?? null;
        $this->loanInterestFeesCharges = $data['loanInterestFeesCharges'] ?? null;
    }

    /**
     * Gets identification.
     *
     * @return string|null
     */
    public function getIdentification(): ?string
    {
        return $this->identification;
    }

    /**
     * Sets identification.
     *
     * @param string|null $identification  Unique and unambiguous identification of a  Tier Band for a SME Loan.
     *
     * @return $this
     */
    public function setIdentification(?string $identification = null): self
    {
        $this->identification = $identification;

        return $this;
    }

    /**
     * Gets tierValueMinimum.
     *
     * @return string|null
     */
    public function getTierValueMinimum(): ?string
    {
        return $this->tierValueMinimum;
    }

    /**
     * Sets tierValueMinimum.
     *
     * @param string|null $tierValueMinimum  Minimum loan value for which the loan interest tier applies.
     *
     * @return $this
     */
    public function setTierValueMinimum(?string $tierValueMinimum): self
    {
        $this->tierValueMinimum = $tierValueMinimum;

        return $this;
    }

    /**
     * Gets tierValueMaximum.
     *
     * @return string|null
     */
    public function getTierValueMaximum(): ?string
    {
        return $this->tierValueMaximum;
    }

    /**
     * Sets tierValueMaximum.
     *
     * @param string|null $tierValueMaximum  Maximum loan value for which the loan interest tier applies.
     *
     * @return $this
     */
    public function setTierValueMaximum(?string $tierValueMaximum = null): self
    {
        $this->tierValueMaximum = $tierValueMaximum;

        return $this;
    }

    /**
     * Gets tierValueMinTerm.
     *
     * @return int|null
     */
    public function getTierValueMinTerm(): ?int
    {
        return $this->tierValueMinTerm;
    }

    /**
     * Sets tierValueMinTerm.
     *
     * @param int|null $tierValueMinTerm  Minimum loan term for which the loan interest tier applies.
     *
     * @return $this
     */
    public function setTierValueMinTerm(?int $tierValueMinTerm): self
    {
        $this->tierValueMinTerm = $tierValueMinTerm;

        return $this;
    }

    /**
     * Gets minTermPeriod.
     *
     * @return string|null
     */
    public function getMinTermPeriod(): ?string
    {
        return $this->minTermPeriod;
    }

    /**
     * Sets minTermPeriod.
     *
     * @param string|null $minTermPeriod  The unit of period (days, weeks, months etc.) of the Minimum Term
     *
     * @return $this
     */
    public function setMinTermPeriod(?string $minTermPeriod): self
    {
        $this->minTermPeriod = $minTermPeriod;

        return $this;
    }

    /**
     * Gets tierValueMaxTerm.
     *
     * @return int|null
     */
    public function getTierValueMaxTerm(): ?int
    {
        return $this->tierValueMaxTerm;
    }

    /**
     * Sets tierValueMaxTerm.
     *
     * @param int|null $tierValueMaxTerm  Maximum loan term for which the loan interest tier applies.
     *
     * @return $this
     */
    public function setTierValueMaxTerm(?int $tierValueMaxTerm = null): self
    {
        $this->tierValueMaxTerm = $tierValueMaxTerm;

        return $this;
    }

    /**
     * Gets maxTermPeriod.
     *
     * @return string|null
     */
    public function getMaxTermPeriod(): ?string
    {
        return $this->maxTermPeriod;
    }

    /**
     * Sets maxTermPeriod.
     *
     * @param string|null $maxTermPeriod  The unit of period (days, weeks, months etc.) of the Maximum Term
     *
     * @return $this
     */
    public function setMaxTermPeriod(?string $maxTermPeriod = null): self
    {
        $this->maxTermPeriod = $maxTermPeriod;

        return $this;
    }

    /**
     * Gets fixedVariableInterestRateType.
     *
     * @return OBInterestFixedVariableType1Code|null
     */
    public function getFixedVariableInterestRateType(): ?OBInterestFixedVariableType1Code
    {
        return $this->fixedVariableInterestRateType;
    }

    /**
     * Sets fixedVariableInterestRateType.
     *
     * @param OBInterestFixedVariableType1Code|null $fixedVariableInterestRateType
     *
     * @return $this
     */
    public function setFixedVariableInterestRateType(?OBInterestFixedVariableType1Code $fixedVariableInterestRateType): self
    {
        $this->fixedVariableInterestRateType = $fixedVariableInterestRateType;

        return $this;
    }

    /**
     * Gets repAPR.
     *
     * @return string|null
     */
    public function getRepAPR(): ?string
    {
        return $this->repAPR;
    }

    /**
     * Sets repAPR.
     *
     * @param string|null $repAPR  The annual equivalent rate (AER) is interest that is calculated under the assumption that any interest paid is combined with the original balance and the next interest payment will be based on the slightly higher account balance. Overall, this means that interest can be compounded several times in a year depending on the number of times that interest payments are made.  For SME Loan, this APR is the representative APR which includes any account fees.
     *
     * @return $this
     */
    public function setRepAPR(?string $repAPR): self
    {
        $this->repAPR = $repAPR;

        return $this;
    }

    /**
     * Gets loanProviderInterestRateType.
     *
     * @return string|null
     */
    public function getLoanProviderInterestRateType(): ?string
    {
        return $this->loanProviderInterestRateType;
    }

    /**
     * Sets loanProviderInterestRateType.
     *
     * @param string|null $loanProviderInterestRateType  Interest rate types, other than APR, which financial institutions may use to describe the annual interest rate payable for the SME Loan.
     *
     * @return $this
     */
    public function setLoanProviderInterestRateType(?string $loanProviderInterestRateType = null): self
    {
        $this->loanProviderInterestRateType = $loanProviderInterestRateType;

        return $this;
    }

    /**
     * Gets loanProviderInterestRate.
     *
     * @return string|null
     */
    public function getLoanProviderInterestRate(): ?string
    {
        return $this->loanProviderInterestRate;
    }

    /**
     * Sets loanProviderInterestRate.
     *
     * @param string|null $loanProviderInterestRate  Loan provider Interest for the SME Loan product
     *
     * @return $this
     */
    public function setLoanProviderInterestRate(?string $loanProviderInterestRate = null): self
    {
        $this->loanProviderInterestRate = $loanProviderInterestRate;

        return $this;
    }

    /**
     * Gets notes.
     *
     * @return array|null
     */
    public function getNotes(): ?array
    {
        return $this->notes;
    }

    /**
     * Sets notes.
     *
     * @param array|null $notes
     *
     * @return $this
     */
    public function setNotes(?array $notes = null): self
    {
        $this->notes = $notes;

        return $this;
    }

    /**
     * Gets otherLoanProviderInterestRateType.
     *
     * @return OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInnerOtherLoanProviderInterestRateType|null
     */
    public function getOtherLoanProviderInterestRateType(): ?OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInnerOtherLoanProviderInterestRateType
    {
        return $this->otherLoanProviderInterestRateType;
    }

    /**
     * Sets otherLoanProviderInterestRateType.
     *
     * @param OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInnerOtherLoanProviderInterestRateType|null $otherLoanProviderInterestRateType
     *
     * @return $this
     */
    public function setOtherLoanProviderInterestRateType(?OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInnerOtherLoanProviderInterestRateType $otherLoanProviderInterestRateType = null): self
    {
        $this->otherLoanProviderInterestRateType = $otherLoanProviderInterestRateType;

        return $this;
    }

    /**
     * Gets loanInterestFeesCharges.
     *
     * @return array|null
     */
    public function getLoanInterestFeesCharges(): ?array
    {
        return $this->loanInterestFeesCharges;
    }

    /**
     * Sets loanInterestFeesCharges.
     *
     * @param array|null $loanInterestFeesCharges
     *
     * @return $this
     */
    public function setLoanInterestFeesCharges(?array $loanInterestFeesCharges = null): self
    {
        $this->loanInterestFeesCharges = $loanInterestFeesCharges;

        return $this;
    }
}


