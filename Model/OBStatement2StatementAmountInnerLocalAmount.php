<?php
/**
 * OBStatement2StatementAmountInnerLocalAmount
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Account and Transaction API Specification
 *
 * Swagger for Account and Transaction API Specification
 *
 * The version of the OpenAPI document: 3.1.11
 * Contact: ServiceDesk@openbanking.org.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the OBStatement2StatementAmountInnerLocalAmount model.
 *
 * Optional component providing the equivalent of Amount in local currency.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class OBStatement2StatementAmountInnerLocalAmount 
{
        /**
     * A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
     *
     * @var string|null
     * @SerializedName("Amount")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Regex("/^\\d{1,13}$|^\\d{1,13}\\.\\d{1,5}$/")
     */
    protected ?string $amount = null;

    /**
     * A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 \&quot;Codes for the representation of currencies and funds\&quot;.
     *
     * @var string|null
     * @SerializedName("Currency")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Regex("/^[A-Z]{3,3}$/")
     */
    protected ?string $currency = null;

    /**
     * The amount in the local market currency for which the asset is held. Default is Local Currency (LCUR) if not specified
     *
     * @var string|null
     * @SerializedName("SubType")
     * @Assert\Choice({ "BaseCurrency", "LocalCurrency" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $subType = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->amount = $data['amount'] ?? null;
        $this->currency = $data['currency'] ?? null;
        $this->subType = $data['subType'] ?? null;
    }

    /**
     * Gets amount.
     *
     * @return string|null
     */
    public function getAmount(): ?string
    {
        return $this->amount;
    }

    /**
     * Sets amount.
     *
     * @param string|null $amount  A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
     *
     * @return $this
     */
    public function setAmount(?string $amount): self
    {
        $this->amount = $amount;

        return $this;
    }

    /**
     * Gets currency.
     *
     * @return string|null
     */
    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    /**
     * Sets currency.
     *
     * @param string|null $currency  A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".
     *
     * @return $this
     */
    public function setCurrency(?string $currency): self
    {
        $this->currency = $currency;

        return $this;
    }

    /**
     * Gets subType.
     *
     * @return string|null
     */
    public function getSubType(): ?string
    {
        return $this->subType;
    }

    /**
     * Sets subType.
     *
     * @param string|null $subType  The amount in the local market currency for which the asset is held. Default is Local Currency (LCUR) if not specified
     *
     * @return $this
     */
    public function setSubType(?string $subType = null): self
    {
        $this->subType = $subType;

        return $this;
    }
}


